{
    "docs": [
        {
            "location": "/quickstart/",
            "text": "Quickstart\n\n\nAs a quick demonstration of the framework let's test the \n\nReact variant of TodoMVC\n project. \nOf course other testing other frameworks is possible, you can try it \nby yourself!\n\n\nInstall packages\n\n\nIn order to install Kakunin you have to make sure that you have installed:\n\n\nnode.js - v7.8.0 min\nJDK\nChrome\n\n\n\n\n\n\n\n\n\nCreate directory for your project and enter it\n\n\nbash\n$mkdir my_project\ncd my_project\n\n\n\n\n\n\nInitialize JavaScript project\n\n\nbash\nnpm init\n\n\n\n\n\n\nInstall dependencies\n\n\nbash\nnpm install cross-env protractor webdriver-manager kakunin  --save\n\n\n\n\n\n\nInside \npackage.json\n file add new script in \nscripts\n section:\n\n\njson\n\"kakunin\": \"cross-env NODE_ENV=prod kakunin\"\n \n\n\n\n\n\n\nConfigure Kakunin\n\n\n\n\n\n\nRun initialization command \n\n\nbash\nnpm run kakunin init\n\n\n\n\n\n\nanswer literally few questions:\n\n\nWhat kind of application would you like to test?\n : \notherWeb\n\n\nWhat is base url? [http://localhost:3000]\n: \nhttp://todomvc.com\n\n\nWhat kind of email service would you like to use?\n: \nnone\n \n\n\n\n\n\n\nAnd you're set! Now let's write some test!\n\n\nTest the app\n\n\n\n\nCreate a page object that will contain instructions on how to locate elements in the projects.\nCreate a file \npages/main.js\n:\n\n\n\n\n'use strict'\n;\n\n\n\nconst\n \n{\n \nBasePage\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\n\nclass\n \nMainPage\n \nextends\n \nBasePage\n \n{\n\n    \nconstructor\n()\n \n{\n\n        \nsuper\n();\n\n\n        \n// define the main url for the page\n\n        \nthis\n.\nurl\n \n=\n \n'/examples/react/#/'\n;\n\n\n        \n// whole form tag\n\n        \nthis\n.\naddTodoForm\n \n=\n \n$\n(\n'.todoapp'\n);\n\n\n        \n// input field\n\n        \nthis\n.\ntodoInput\n \n=\n \n$\n(\n'input.new-todo'\n);\n\n\n        \n// list of currently added todos\n\n        \nthis\n.\ntodos\n \n=\n \n$$\n(\n'.todo-list .view'\n);\n\n        \nthis\n.\ntodoLabel\n \n=\n \nby\n.\ncss\n(\n'label'\n);\n\n\n        \n// first todo item in a list\n\n        \nthis\n.\nfirstTodoItem\n \n=\n \nthis\n.\ntodos\n.\nget\n(\n0\n);\n\n    \n}\n\n\n}\n\n\n\nmodule\n.\nexports\n \n=\n \nMainPage\n;\n\n\n\n\n\n\nNow that we have prepared the locators, we can start writing our test. Let's test adding new todo item. \n\n\nCreate a file named: \nfeatures/adding_todo.feature\n with the following contents:\n\n\nFeature:\n\n\n\n    \nScenario:\n Adding todo\n\n\n        Given \nI visit the \"\nmain\n\" page\n\n\n        \nAnd \nI wait for \"\nvisibilityOf\n\" of the \"\naddTodoForm\n\" element\n\n\n        \nAnd \nthe \"\naddTodoForm\n\" element is visible\n\n\n        \nWhen \nI fill the \"\naddTodoForm\n\" form with:\n\n\n            |\n todoInput\n |\n My new todo\n |\n\n\n        \nAnd \nI press the \"\nenter\n\" key\n\n\n        \nThen \nthere are \"\nequal 1\n\" \"\ntodos\n\" elements\n\n\n\n\n\n\nAnd that's it! All you have to do now is to run the test and watch the magic happens ;)\n\n\nnpm run kakunin\n\n\n\n\n\nThe tests may run quite fast so you might not been able to see that it \nreally works as expected. To check if the todo items has been really \nadded to the list, let's use a simple hack - let's pause the running \ntest right after the todo has been added. \n\n\nTo do that, let's upgrade our Scenario. Update the file:\n\n\nFeature:\n\n\n\n    \nScenario:\n Adding todo\n\n\n        Given \nI visit the \"\nmain\n\" page\n\n\n        \nAnd \nI wait for \"\nvisibilityOf\n\" of the \"\naddTodoForm\n\" element\n\n\n        \nAnd \nthe \"\naddTodoForm\n\" element is visible\n\n\n        \nWhen \nI fill the \"\naddTodoForm\n\" form with:\n\n\n            |\n todoInput\n |\n My new todo\n |\n\n\n        \nAnd \nI wait for \"\n1\n\" seconds\n\n\n        \nAnd \nI press the \"\nenter\n\" key\n\n\n        \nWhen \nI fill the \"\naddTodoForm\n\" form with:\n\n\n            |\n todoInput\n |\n Another todo item!\n |\n\n\n        \nAnd \nI wait for \"\n1\n\" seconds\n\n\n        \nAnd \nI press the \"\nenter\n\" key\n\n\n        \nThen \nthere are \"\nequal 2\n\" \"\ntodos\n\" elements\n\n\n        \nThen \nI wait for \"\n5\n\" seconds\n\n\n\n\n\n\nAs you can see, we've added 1 new step that waits for a second before \n\"pressing\" the \nenter\n key. We've also added a second todo item with \na short pause at the end of the test so you can see the changes.\n\n\nIf you want to see what can we do more with the TodoMVC project, take a look \nat the \nexample\n dir, where you'll find a complete set of test for the project.",
            "title": "Quick start"
        },
        {
            "location": "/quickstart/#quickstart",
            "text": "As a quick demonstration of the framework let's test the  React variant of TodoMVC  project. \nOf course other testing other frameworks is possible, you can try it \nby yourself!",
            "title": "Quickstart"
        },
        {
            "location": "/quickstart/#install-packages",
            "text": "In order to install Kakunin you have to make sure that you have installed:  node.js - v7.8.0 min\nJDK\nChrome    Create directory for your project and enter it  bash\n$mkdir my_project\ncd my_project    Initialize JavaScript project  bash\nnpm init    Install dependencies  bash\nnpm install cross-env protractor webdriver-manager kakunin  --save    Inside  package.json  file add new script in  scripts  section:  json\n\"kakunin\": \"cross-env NODE_ENV=prod kakunin\"",
            "title": "Install packages"
        },
        {
            "location": "/quickstart/#configure-kakunin",
            "text": "Run initialization command   bash\nnpm run kakunin init    answer literally few questions:  What kind of application would you like to test?  :  otherWeb  What is base url? [http://localhost:3000] :  http://todomvc.com  What kind of email service would you like to use? :  none      And you're set! Now let's write some test!",
            "title": "Configure Kakunin"
        },
        {
            "location": "/quickstart/#test-the-app",
            "text": "Create a page object that will contain instructions on how to locate elements in the projects.\nCreate a file  pages/main.js :   'use strict' ;  const   {   BasePage   }   =   require ( 'kakunin' );  class   MainPage   extends   BasePage   { \n     constructor ()   { \n         super (); \n\n         // define the main url for the page \n         this . url   =   '/examples/react/#/' ; \n\n         // whole form tag \n         this . addTodoForm   =   $ ( '.todoapp' ); \n\n         // input field \n         this . todoInput   =   $ ( 'input.new-todo' ); \n\n         // list of currently added todos \n         this . todos   =   $$ ( '.todo-list .view' ); \n         this . todoLabel   =   by . css ( 'label' ); \n\n         // first todo item in a list \n         this . firstTodoItem   =   this . todos . get ( 0 ); \n     }  }  module . exports   =   MainPage ;   Now that we have prepared the locators, we can start writing our test. Let's test adding new todo item.   Create a file named:  features/adding_todo.feature  with the following contents:  Feature:       Scenario:  Adding todo          Given  I visit the \" main \" page           And  I wait for \" visibilityOf \" of the \" addTodoForm \" element           And  the \" addTodoForm \" element is visible           When  I fill the \" addTodoForm \" form with:              |  todoInput  |  My new todo  |           And  I press the \" enter \" key           Then  there are \" equal 1 \" \" todos \" elements   And that's it! All you have to do now is to run the test and watch the magic happens ;)  npm run kakunin  The tests may run quite fast so you might not been able to see that it \nreally works as expected. To check if the todo items has been really \nadded to the list, let's use a simple hack - let's pause the running \ntest right after the todo has been added.   To do that, let's upgrade our Scenario. Update the file:  Feature:       Scenario:  Adding todo          Given  I visit the \" main \" page           And  I wait for \" visibilityOf \" of the \" addTodoForm \" element           And  the \" addTodoForm \" element is visible           When  I fill the \" addTodoForm \" form with:              |  todoInput  |  My new todo  |           And  I wait for \" 1 \" seconds           And  I press the \" enter \" key           When  I fill the \" addTodoForm \" form with:              |  todoInput  |  Another todo item!  |           And  I wait for \" 1 \" seconds           And  I press the \" enter \" key           Then  there are \" equal 2 \" \" todos \" elements           Then  I wait for \" 5 \" seconds   As you can see, we've added 1 new step that waits for a second before \n\"pressing\" the  enter  key. We've also added a second todo item with \na short pause at the end of the test so you can see the changes.  If you want to see what can we do more with the TodoMVC project, take a look \nat the  example  dir, where you'll find a complete set of test for the project.",
            "title": "Test the app"
        },
        {
            "location": "/",
            "text": "About Kakunin\n\n\nKakunin is a Protractor extension created by The Software House sp. z o.o. and Takamol Holding. It allows you\nto write e2e test scenarios with a help of Gherkin language and JavaScript for all kind of applications - Angular, React and others.\n\n\nInstallation\n\n\nIn order to install Kakunin you have to make sure that you have installed:\n\n\nnode.js - v7.8.0 min\nJDK\nChrome\n\n\n\n\n\nCreate directory for your project\n\n\nmkdir my_project\n\n\n\n\n\nGo to project directory \n\n\ncd\n my_project\n\n\n\n\n\nInitialize JavaScript project\n\n\nnpm init\n\n\n\n\n\nInstall dependencies\n\n\nnpm install cross-env protractor webdriver-manager kakunin  --save\n\n\n\n\n\nInside \npackage.json\n file; add new script in \nscripts\n section:\n\n\n\"kakunin\"\n:\n \n\"cross-env NODE_ENV=prod kakunin\"\n\n\n\n\n\n\nConfiguration\n\n\n\n\nCreate kakunin project \n\n\n\n\nnpm run kakunin init\n\n\n\n\n\nThe above command will run Kakunin's init script.\n\n Answer what kind of app you're going to test (\ndefault: AngularJS\n)\n\n Enter URL where your tested app will be running (\ndefault: http://localhost:3000\n)\n* Choose if you plan to use some emails checking service (\ndefault: none\n)\n\n\nAnd you're set! Now you can run the tests using Kakunin:\n\n\nnpm run kakunin\n\n\n\n\n\nCommands\n\n\n\n\nnpm run kakunin init [-- --advanced]\n - Create a new project by answering few simple questions (you can pass additional parameter to enter advanced mode where you can configure all Kakunin options by yourself)\n\n\nnpm run kakunin\n - Run test scenarios\n\n\nnpm run kakunin -- --tags @someTag\n - Run only scenarios tagged by \n@someTag\n\n\nnpm run kakunin -- --tags \"@someTag and @otherTag\"\n - Run only scenarios tagged by \n@someTag\n and \n@otherTag\n at the same time\n\n\nnpm run kakunin -- --tags \"@someTag or @otherTag\"\n - Run only scenarios tagged by \n@someTag\n or \n@otherTag\n\n\nnpm run kakunin -- --tags \"not @someTag\"\n - Run only scenarios not tagged by \n@someTag\n\n\n\n\nTroubleshooting & Tips\n\n\nIn order to make cucumber steps autosuggestion work properly in JetBrains tools, make sure your project is \nECMAScript 6\n compatible and you have \ncucumberjs\n plugin installed.\nDue to non-resolved issue in Jetbrains editors (\nsee here\n) we'll have to do one more step:\n\n\nGo to \nstep_definitions\n directory \n\n\ncd\n step_definitions\n\n\n\n\n\nPaste this code into terminal and restart your IDE:\n\n\nFor Linux/MacOs:\n\n\nln -s ../node_modules/kakunin/dist/step_definitions/elements.js kakunin-elements.js\nln -s ../node_modules/kakunin/dist/step_definitions/debug.js kakunin-debug.js\nln -s ../node_modules/kakunin/dist/step_definitions/file.js kakunin-file.js\nln -s ../node_modules/kakunin/dist/step_definitions/form.js kakunin-form.js\nln -s ../node_modules/kakunin/dist/step_definitions/email.js kakunin-email.js\nln -s ../node_modules/kakunin/dist/step_definitions/generators.js kakunin-generators.js\nln -s ../node_modules/kakunin/dist/step_definitions/navigation.js kakunin-navigation.js \n\n\n\n\n\nFor Windows 8+: (you have to do this as administrator)\n\n\nmklink kakunin-elements.js ..\n\\n\node_modules\n\\k\nakunin\n\\d\nist\n\\s\ntep_definitions\n\\e\nlements.js\n\"\n\n\nmklink kakunin-debug.js ..\\node_modules\\kakunin\\dist\\step_definitions\\debug.js\"\n\nmklink kakunin-file.js ..\n\\n\node_modules\n\\k\nakunin\n\\d\nist\n\\s\ntep_definitions\n\\f\nile.js\n\"\n\n\nmklink kakunin-form.js ..\\node_modules\\kakunin\\dist\\step_definitions\\form.js\"\n\nmklink kakunin-email.js ..\n\\n\node_modules\n\\k\nakunin\n\\d\nist\n\\s\ntep_definitions\n\\e\nmail.js\n\"\n\n\nmklink kakunin-generators.js ..\\node_modules\\kakunin\\dist\\step_definitions\\generators.js\"\n\nmklink kakunin-navigation.js ..\n\\n\node_modules\n\\k\nakunin\n\\d\nist\n\\s\ntep_definitions\n\\n\navigation.js\n\"\n\n\n\n\n\n\nKeep in mind that \nmklink\n is not available in older Windows distributions.\n\n\nThis will create symlinks inside \nstep_definitions\n directory and make \ncucumberjs\n plugin recognize kakunin built-in steps.",
            "title": "Getting started"
        },
        {
            "location": "/#about-kakunin",
            "text": "Kakunin is a Protractor extension created by The Software House sp. z o.o. and Takamol Holding. It allows you\nto write e2e test scenarios with a help of Gherkin language and JavaScript for all kind of applications - Angular, React and others.",
            "title": "About Kakunin"
        },
        {
            "location": "/#installation",
            "text": "In order to install Kakunin you have to make sure that you have installed:  node.js - v7.8.0 min\nJDK\nChrome  Create directory for your project  mkdir my_project  Go to project directory   cd  my_project  Initialize JavaScript project  npm init  Install dependencies  npm install cross-env protractor webdriver-manager kakunin  --save  Inside  package.json  file; add new script in  scripts  section:  \"kakunin\" :   \"cross-env NODE_ENV=prod kakunin\"",
            "title": "Installation"
        },
        {
            "location": "/#configuration",
            "text": "Create kakunin project    npm run kakunin init  The above command will run Kakunin's init script.  Answer what kind of app you're going to test ( default: AngularJS )  Enter URL where your tested app will be running ( default: http://localhost:3000 )\n* Choose if you plan to use some emails checking service ( default: none )  And you're set! Now you can run the tests using Kakunin:  npm run kakunin",
            "title": "Configuration"
        },
        {
            "location": "/#commands",
            "text": "npm run kakunin init [-- --advanced]  - Create a new project by answering few simple questions (you can pass additional parameter to enter advanced mode where you can configure all Kakunin options by yourself)  npm run kakunin  - Run test scenarios  npm run kakunin -- --tags @someTag  - Run only scenarios tagged by  @someTag  npm run kakunin -- --tags \"@someTag and @otherTag\"  - Run only scenarios tagged by  @someTag  and  @otherTag  at the same time  npm run kakunin -- --tags \"@someTag or @otherTag\"  - Run only scenarios tagged by  @someTag  or  @otherTag  npm run kakunin -- --tags \"not @someTag\"  - Run only scenarios not tagged by  @someTag",
            "title": "Commands"
        },
        {
            "location": "/#troubleshooting-tips",
            "text": "In order to make cucumber steps autosuggestion work properly in JetBrains tools, make sure your project is  ECMAScript 6  compatible and you have  cucumberjs  plugin installed.\nDue to non-resolved issue in Jetbrains editors ( see here ) we'll have to do one more step:  Go to  step_definitions  directory   cd  step_definitions  Paste this code into terminal and restart your IDE:  For Linux/MacOs:  ln -s ../node_modules/kakunin/dist/step_definitions/elements.js kakunin-elements.js\nln -s ../node_modules/kakunin/dist/step_definitions/debug.js kakunin-debug.js\nln -s ../node_modules/kakunin/dist/step_definitions/file.js kakunin-file.js\nln -s ../node_modules/kakunin/dist/step_definitions/form.js kakunin-form.js\nln -s ../node_modules/kakunin/dist/step_definitions/email.js kakunin-email.js\nln -s ../node_modules/kakunin/dist/step_definitions/generators.js kakunin-generators.js\nln -s ../node_modules/kakunin/dist/step_definitions/navigation.js kakunin-navigation.js   For Windows 8+: (you have to do this as administrator)  mklink kakunin-elements.js .. \\n ode_modules \\k akunin \\d ist \\s tep_definitions \\e lements.js \"  mklink kakunin-debug.js ..\\node_modules\\kakunin\\dist\\step_definitions\\debug.js\" \nmklink kakunin-file.js .. \\n ode_modules \\k akunin \\d ist \\s tep_definitions \\f ile.js \"  mklink kakunin-form.js ..\\node_modules\\kakunin\\dist\\step_definitions\\form.js\" \nmklink kakunin-email.js .. \\n ode_modules \\k akunin \\d ist \\s tep_definitions \\e mail.js \"  mklink kakunin-generators.js ..\\node_modules\\kakunin\\dist\\step_definitions\\generators.js\" \nmklink kakunin-navigation.js .. \\n ode_modules \\k akunin \\d ist \\s tep_definitions \\n avigation.js \"   Keep in mind that  mklink  is not available in older Windows distributions.  This will create symlinks inside  step_definitions  directory and make  cucumberjs  plugin recognize kakunin built-in steps.",
            "title": "Troubleshooting &amp; Tips"
        },
        {
            "location": "/configuration/",
            "text": "Kakunin config\n\n\nmodule\n.\nexports\n = {\n    \n\"browserWidth\"\n: \n1600\n,\n    \n\"browserHeight\"\n: \n900\n,\n    \n\"timeout\"\n: \n60\n,\n    \n\"elementsVisibilityTimeout\"\n: \n5\n,\n    \n\"waitForPageTimeout\"\n: \n5\n,\n    \n\"downloadTimeout\"\n: \n30\n,\n    \n\"reports\"\n: \n\"/reports\"\n,\n    \n\"downloads\"\n: \n\"/downloads\"\n,\n    \n\"data\"\n: \n\"/data\"\n,\n    \n\"features\"\n: [\n        \n\"/features\"\n\n    ],\n    \n\"pages\"\n: [\n        \n\"/pages\"\n\n    ],\n    \n\"matchers\"\n: [\n        \n\"/matchers\"\n\n    ],\n    \n\"generators\"\n: [\n        \n\"/generators\"\n\n    ],\n    \n\"form_handlers\"\n: [\n        \n\"/form_handlers\"\n\n    ],\n    \n\"step_definitions\"\n: [\n        \n\"/step_definitions\"\n\n    ],\n    \n\"comparators\"\n: [\n        \n\"/comparators\"\n\n    ],\n    \n\"dictionaries\"\n: [\n        \n\"/dictionaries\"\n\n    ],\n    \n\"transformers\"\n: [\n        \n\"/transformers\"\n\n    ],\n    \n\"regexes\"\n: [\n        \n\"/regexes\"\n\n    ],\n    \n\"hooks\"\n: [\n        \n\"/hooks\"\n\n    ],\n    \n\"clearEmailInboxBeforeTests\"\n: \nfalse\n,\n    \n\"clearCookiesAfterScenario\"\n: \ntrue\n,\n    \n\"clearLocalStorageAfterScenario\"\n: \ntrue\n,\n    \n\"email\"\n: \nnull\n,\n    \n\"headless\"\n: \nfalse\n,\n    \n\"noGpu\"\n: \nfalse\n,\n    \n\"type\"\n: \n\"otherWeb\"\n,\n    \n\"baseUrl\"\n: \n\"http://localhost:8080\"\n,\n    \n\"accounts\"\n: {\n        \n\"someAccount\"\n: {\n            \n\"accounts\"\n: [\n                {\n                    \n\"email\"\n: \n\"\"\n,\n                    \n\"password\"\n: \n\"\"\n\n                }\n            ]\n        }\n    }\n}\n\n\n\n\n\nConfiguration options\n\n\nbrowserWidth\n - width of browser window \ndefault: 1600\n\n\nbrowserheight\n - height of browser window \ndefault: 900\n\n\ntimeout\n - global timeout for a single step execution in seconds \ndefault: 60\n\n\nintervalEmail\n - interval for email checking step \ndefault: 5\n in seconds\n\n\nelementsVisibilityTimeout\n - maximum wait timeout for element visibility \ndefault: 5\n seconds\n\n\nwaitForPageTimeout\n - maximum wait timeout for page visibility \ndefault: 5\n seconds\n\n\ndownloadTimeout\n - maximum wait timeout for file to be downloaded \ndefault: 30\n seconds\n\n\nemails\n - array of paths to store emails related custom code\n\n\nreports\n - path to store reports\n\n\ndownloads\n - path to store downloaded files\n\n\ndata\n - path to store test related files (for example files to be downloaded)\n\n\nfeature\n - array of paths to store features\n\n\npages\n - array of paths to store page objects\n\n\nmatchers\n - array of paths to store custom matchers\n\n\ngenerators\n - array of paths to store custom generators\n\n\nform_handlers\n - array of paths to store custom form handlers\n\n\nstep_definitions\n - array of paths to store custom steps\n\n\ncomparators\n - array of paths to store custom comparators\n\n\ndictionaries\n - array of paths to store custom dictionaries\n\n\ntransformers\n - array of paths to store custom transformers\n\n\nregexes\n - array of paths to store custom regexes\n\n\nhooks\n - array of paths to store custom hooks\n\n\nclearEmailInboxBeforeTests\n - flag to active clearing email inbox before tests are executed \ndefault: false | true for apps with email checking functionality activated\n\n\nclearCookiesAfterScenario\n - flag to activate clearing cookies after every scenario \ndefault: true\n\n\nclearLocalStorageAfterScenario\n - flag to activate clearing local storage after every scenario \ndefault: true\n\n\nemail\n - email configuration \ndefault: null\n\n\nfor mailtrap email checking system:\n\n\n\"type\"\n:\n \n\"mailtrap\"\n,\n\n\n\"config\"\n:\n \n{\n\n    \n\"apiKey\"\n:\n \n\"your-mailtrap-api-key\"\n,\n\n    \n\"inboxId\"\n:\n \n\"your-mailtrap-inbox\"\n,\n\n    \n\"url\"\n:\n \n\"https://mailtrap.io/api/v1\"\n\n\n}\n\n\n\n\n\n\nfor custom email checking system only type is required:\n\n\n\"type\": \"custom-type\"\n\n\n\n\n\nheadless\n - flag to activate chrome headless browser \ndefault: false\n\n\nnoGpu\n - flag to activate cpu only mode \ndefault: false\n\n\ntype\n - type of application either \nng1 | ng2 | otherWeb\n\n\nbaseUrl\n - url of tested application\n\n\naccounts\n - object to store accounts information. This is bound to \nuserProvider\n and allows to use advanced email checking options like recipient checking.\n\n\n\"someAccount\"\n:\n \n{\n\n    \n\"accounts\"\n:\n \n[\n\n        \n{\n\n            \n\"email\"\n:\n \n\"\"\n,\n\n            \n\"password\"\n:\n \n\"\"\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\n\nEnvironment variables\n\n\nKakunin uses a single \n.env\n file to load ENV variables. By default there is only one:\n\n\nFIXTURES_RELOAD_HOST\n - allows you to specify host for fixtures reloading. This allows you to use \n@reloadFixtures\n tag on scenarios that should restore database to starting state, before the test is running",
            "title": "Configuration"
        },
        {
            "location": "/configuration/#kakunin-config",
            "text": "module . exports  = {\n     \"browserWidth\" :  1600 ,\n     \"browserHeight\" :  900 ,\n     \"timeout\" :  60 ,\n     \"elementsVisibilityTimeout\" :  5 ,\n     \"waitForPageTimeout\" :  5 ,\n     \"downloadTimeout\" :  30 ,\n     \"reports\" :  \"/reports\" ,\n     \"downloads\" :  \"/downloads\" ,\n     \"data\" :  \"/data\" ,\n     \"features\" : [\n         \"/features\" \n    ],\n     \"pages\" : [\n         \"/pages\" \n    ],\n     \"matchers\" : [\n         \"/matchers\" \n    ],\n     \"generators\" : [\n         \"/generators\" \n    ],\n     \"form_handlers\" : [\n         \"/form_handlers\" \n    ],\n     \"step_definitions\" : [\n         \"/step_definitions\" \n    ],\n     \"comparators\" : [\n         \"/comparators\" \n    ],\n     \"dictionaries\" : [\n         \"/dictionaries\" \n    ],\n     \"transformers\" : [\n         \"/transformers\" \n    ],\n     \"regexes\" : [\n         \"/regexes\" \n    ],\n     \"hooks\" : [\n         \"/hooks\" \n    ],\n     \"clearEmailInboxBeforeTests\" :  false ,\n     \"clearCookiesAfterScenario\" :  true ,\n     \"clearLocalStorageAfterScenario\" :  true ,\n     \"email\" :  null ,\n     \"headless\" :  false ,\n     \"noGpu\" :  false ,\n     \"type\" :  \"otherWeb\" ,\n     \"baseUrl\" :  \"http://localhost:8080\" ,\n     \"accounts\" : {\n         \"someAccount\" : {\n             \"accounts\" : [\n                {\n                     \"email\" :  \"\" ,\n                     \"password\" :  \"\" \n                }\n            ]\n        }\n    }\n}",
            "title": "Kakunin config"
        },
        {
            "location": "/configuration/#configuration-options",
            "text": "browserWidth  - width of browser window  default: 1600  browserheight  - height of browser window  default: 900  timeout  - global timeout for a single step execution in seconds  default: 60  intervalEmail  - interval for email checking step  default: 5  in seconds  elementsVisibilityTimeout  - maximum wait timeout for element visibility  default: 5  seconds  waitForPageTimeout  - maximum wait timeout for page visibility  default: 5  seconds  downloadTimeout  - maximum wait timeout for file to be downloaded  default: 30  seconds  emails  - array of paths to store emails related custom code  reports  - path to store reports  downloads  - path to store downloaded files  data  - path to store test related files (for example files to be downloaded)  feature  - array of paths to store features  pages  - array of paths to store page objects  matchers  - array of paths to store custom matchers  generators  - array of paths to store custom generators  form_handlers  - array of paths to store custom form handlers  step_definitions  - array of paths to store custom steps  comparators  - array of paths to store custom comparators  dictionaries  - array of paths to store custom dictionaries  transformers  - array of paths to store custom transformers  regexes  - array of paths to store custom regexes  hooks  - array of paths to store custom hooks  clearEmailInboxBeforeTests  - flag to active clearing email inbox before tests are executed  default: false | true for apps with email checking functionality activated  clearCookiesAfterScenario  - flag to activate clearing cookies after every scenario  default: true  clearLocalStorageAfterScenario  - flag to activate clearing local storage after every scenario  default: true  email  - email configuration  default: null  for mailtrap email checking system:  \"type\" :   \"mailtrap\" ,  \"config\" :   { \n     \"apiKey\" :   \"your-mailtrap-api-key\" , \n     \"inboxId\" :   \"your-mailtrap-inbox\" , \n     \"url\" :   \"https://mailtrap.io/api/v1\"  }   for custom email checking system only type is required:  \"type\": \"custom-type\"  headless  - flag to activate chrome headless browser  default: false  noGpu  - flag to activate cpu only mode  default: false  type  - type of application either  ng1 | ng2 | otherWeb  baseUrl  - url of tested application  accounts  - object to store accounts information. This is bound to  userProvider  and allows to use advanced email checking options like recipient checking.  \"someAccount\" :   { \n     \"accounts\" :   [ \n         { \n             \"email\" :   \"\" , \n             \"password\" :   \"\" \n         } \n     ]  }",
            "title": "Configuration options"
        },
        {
            "location": "/configuration/#environment-variables",
            "text": "Kakunin uses a single  .env  file to load ENV variables. By default there is only one:  FIXTURES_RELOAD_HOST  - allows you to specify host for fixtures reloading. This allows you to use  @reloadFixtures  tag on scenarios that should restore database to starting state, before the test is running",
            "title": "Environment variables"
        },
        {
            "location": "/how-it-works/",
            "text": "Kakunin is built with \nno-js\n experience in mind. Because of that you're able to test even complicated apps just\nby knowing Kakunin (Gherkin) steps and a few good practices.\n\n\nConcepts\n\n\nKakunin uses \ncucumber-js\n internally, because of that all tests (or rather scenarios) are using \nGherkin\n as a \"programming\"\nlanguage.\n\n\nA simple scenario could look like this:\n\n\nFeature:\n\n\n    \nScenario:\n Display user profile for logged user\n\n\n        Given \nI am logged in as a \"\nuser\n\"\n\n\n        \nWhen \nthe \"\ndashboard\n\" page is displayed\n\n\n        \nAnd \nI click the \"\nprofileButton\n\" element\n\n\n        \nThen \nthe \"\nmyProfile\n\" page is displayed\n\n\n        \nAnd \nthe \"\nmyName\n\" element is visible\n\n\n\n\n\n\nThis is how most of Kakunin test scenarios look like.\n\n\nThere are a few concepts to be explained.\n\n\nPage objects\n\n\nPage object is a code representation of a page displayed in browser. Kakunin has built-in \nBasePage\n page object, that you should extend.\n\n\nPage object contains information about page url, its elements, locators, but can also have some custom methods if necessary.\n\n\nA very simple example of Kakunin's Page Object could look like the following:\n\n\nconst\n \n{\n \nBasePage\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\n\nclass\n \nDashboardPage\n \nextends\n \nBasePage\n \n{\n\n    \nconstructor\n()\n \n{\n\n        \nsuper\n();\n\n\n        \nthis\n.\nurl\n \n=\n \n'/dashboard'\n;\n\n    \n}\n\n\n}\n\n\n\nmodule\n.\nexports\n \n=\n \nDashboardPage\n;\n\n\n\n\n\n\nAs you can see a basic Page Object must extend one of the Kakunin's Objects and needs to have url field defined (\nthis.url\n).\n\n\nThis code should be saved inside \npages\n directory in a file with \njs\n extension. \nNote that a file name is very important, because we're going to use it as parameter for steps. For example, the following step:\n\n\nWhen \nthe \"\ndashboard\n\" page is displayed\n\n\n\n\n\n\nexpects that there is a file named \ndashboard.js\n inside the \npages\n directory. \n\n\nEvery step that we are using is somehow connected to an object called \ncurrentPage\n. This object value is set to a \npage object that we expect to be on.\n\n\nThis is done by two kinds of steps:\n\n\n\n\nThen the \"dashboard\" page is displayed\n - this one checks if current url in browser is the same as the one inside Page Object and changes a value of the \ncurrentPage\n field\n to this page object\n\n\nWhen I visit the \"dashboard\" page\n - this one goes to the url specified in Page Object and attaches the Page Object to the \ncurrentPage\n field as above \n\n\n\n\nThis concept is a very simple and allows you to easily debug the framework. You can be sure that each subsequent step that declared below the ones above will be executed in context of a page object specified in those methods.\nFor example, having the following code:\n\n\nFeature:\n\n\n    \nScenario:\n Display user profile for logged user\n\n\n        Given \nI am logged in as a \"\nuser\n\"\n\n\n        \nWhen \nthe \"\ndashboard\n\" page is displayed\n\n\n        \nAnd \nI click the \"\nprofileButton\n\" element\n\n\n        \nThen \nthe \"\nmyProfile\n\" page is displayed\n\n\n        \nAnd \nthe \"\nmyName\n\" element is visible\n\n\n\n\n\n\nThe step named \nAnd I click the \"profileButton\" element\n is executed in context of \ndashboard\n Page Object, thus we can assume that \nprofileButton\n should be defined inside the\n\npages/dashboard.js\n file.\n\n\nAt the same time the step \nAnd the \"myName\" element is visible\n is executed in context of \nmyProfile\n, so \nmyName\n should be defined in \npages/myProfile.js\n file.\n\n\nElements and locators\n\n\nThe second concept that you have to understand are elements and locators.\n\n\nEvery element that you see on website can be represented as a element inside the page object. This allows us to use it as a parameter for a step, as we did in:\n\nAnd the \"myName\" element is visible\n.\n\n\nDefining elements is very simple. Let's say we have such page object:\n\n\nconst\n \n{\n \nBasePage\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\n\nclass\n \nDashboardPage\n \nextends\n \nBasePage\n \n{\n\n    \nconstructor\n()\n \n{\n\n        \nsuper\n();\n\n\n        \nthis\n.\nurl\n \n=\n \n'/dashboard'\n;\n\n    \n}\n\n\n}\n\n\n\nmodule\n.exports\n \n=\n \nDashboardPage\n;\n\n\n\n\n\n\nElements should be defined inside \nconstructor\n method. Let's add element for \nmyName\n:\n\n\nconst\n \n{\n \nBasePage\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\n\nclass\n \nDashboardPage\n \nextends\n \nBasePage\n \n{\n\n    \nconstructor\n()\n \n{\n\n        \nsuper\n();\n\n\n        \nthis\n.\nurl\n \n=\n \n'/dashboard'\n;\n\n\n        \nthis\n.\nmyName\n \n=\n \nelement\n(\nby\n.\ncss\n(\n'.myName'\n));\n\n    \n}\n\n\n}\n\n\n\nmodule\n.exports\n \n=\n \nDashboardPage\n;\n\n\n\n\n\n\nAs you see we added a single line \nthis.myName = element(by.css('.myName'));\n.\n\n\nby.css('.myName')\n - is a locator, this is a standard protractor syntax, you can read more on protractors documentation\n\n\nBy joining \nelement\n method with a locator, we created element to be used by our steps.",
            "title": "How it works"
        },
        {
            "location": "/how-it-works/#concepts",
            "text": "Kakunin uses  cucumber-js  internally, because of that all tests (or rather scenarios) are using  Gherkin  as a \"programming\"\nlanguage.  A simple scenario could look like this:  Feature:       Scenario:  Display user profile for logged user          Given  I am logged in as a \" user \"           When  the \" dashboard \" page is displayed           And  I click the \" profileButton \" element           Then  the \" myProfile \" page is displayed           And  the \" myName \" element is visible   This is how most of Kakunin test scenarios look like.  There are a few concepts to be explained.",
            "title": "Concepts"
        },
        {
            "location": "/how-it-works/#page-objects",
            "text": "Page object is a code representation of a page displayed in browser. Kakunin has built-in  BasePage  page object, that you should extend.  Page object contains information about page url, its elements, locators, but can also have some custom methods if necessary.  A very simple example of Kakunin's Page Object could look like the following:  const   {   BasePage   }   =   require ( 'kakunin' );  class   DashboardPage   extends   BasePage   { \n     constructor ()   { \n         super (); \n\n         this . url   =   '/dashboard' ; \n     }  }  module . exports   =   DashboardPage ;   As you can see a basic Page Object must extend one of the Kakunin's Objects and needs to have url field defined ( this.url ).  This code should be saved inside  pages  directory in a file with  js  extension. \nNote that a file name is very important, because we're going to use it as parameter for steps. For example, the following step:  When  the \" dashboard \" page is displayed   expects that there is a file named  dashboard.js  inside the  pages  directory.   Every step that we are using is somehow connected to an object called  currentPage . This object value is set to a \npage object that we expect to be on.  This is done by two kinds of steps:   Then the \"dashboard\" page is displayed  - this one checks if current url in browser is the same as the one inside Page Object and changes a value of the  currentPage  field\n to this page object  When I visit the \"dashboard\" page  - this one goes to the url specified in Page Object and attaches the Page Object to the  currentPage  field as above    This concept is a very simple and allows you to easily debug the framework. You can be sure that each subsequent step that declared below the ones above will be executed in context of a page object specified in those methods.\nFor example, having the following code:  Feature:       Scenario:  Display user profile for logged user          Given  I am logged in as a \" user \"           When  the \" dashboard \" page is displayed           And  I click the \" profileButton \" element           Then  the \" myProfile \" page is displayed           And  the \" myName \" element is visible   The step named  And I click the \"profileButton\" element  is executed in context of  dashboard  Page Object, thus we can assume that  profileButton  should be defined inside the pages/dashboard.js  file.  At the same time the step  And the \"myName\" element is visible  is executed in context of  myProfile , so  myName  should be defined in  pages/myProfile.js  file.",
            "title": "Page objects"
        },
        {
            "location": "/how-it-works/#elements-and-locators",
            "text": "The second concept that you have to understand are elements and locators.  Every element that you see on website can be represented as a element inside the page object. This allows us to use it as a parameter for a step, as we did in: And the \"myName\" element is visible .  Defining elements is very simple. Let's say we have such page object:  const   {   BasePage   }   =   require ( 'kakunin' );  class   DashboardPage   extends   BasePage   { \n     constructor ()   { \n         super (); \n\n         this . url   =   '/dashboard' ; \n     }  }  module .exports   =   DashboardPage ;   Elements should be defined inside  constructor  method. Let's add element for  myName :  const   {   BasePage   }   =   require ( 'kakunin' );  class   DashboardPage   extends   BasePage   { \n     constructor ()   { \n         super (); \n\n         this . url   =   '/dashboard' ; \n\n         this . myName   =   element ( by . css ( '.myName' )); \n     }  }  module .exports   =   DashboardPage ;   As you see we added a single line  this.myName = element(by.css('.myName')); .  by.css('.myName')  - is a locator, this is a standard protractor syntax, you can read more on protractors documentation  By joining  element  method with a locator, we created element to be used by our steps.",
            "title": "Elements and locators"
        },
        {
            "location": "/steps/",
            "text": "Navigation\n\n\nI visit the \":pageFileName\" page\n\n\nVisits the url of the page object with \n:pageFileName\n name.\n\n\nIn order to make it work we create a page object file with a name of \n:pageFileName\n.\n\n\nFor example in case of: \nI visit the \"myPage\" page\n there should be a file \nmyPage.js\n inside the \npages\n directory.\n\n\nIf we have a page object with a name \nsomePageObject.js\n defined inside \npages\n directory then:\n\n\nGiven I visit the \"somePageObject\" page\n\n\nwill set \nthis.currentPage\n variable to \nsomePageObject\n page and we should end up on \nsomePageObject\n url.\n\n\nI visit the \":pageFileName\" page with parameters:\n\n\nThe same as \nI visit the \":pageFileName\" page\n except allows to pass url parameters.\n\n\nIf url of \nmyPage\n is defined as \nthis.url = /orders/:orderId/products/:productId\n then we can use this step to visit this page by:\n\n\nI \nvisit the \"\nmyPage\n\" page with parameters:\n\n\n    |\n orderId\n   |\n 1\n |\n\n\n    |\n productId\n |\n 2\n |\n\n\n\n\n\n\nthis will result in visiting the \n/orders/1/product/2\n page.\n\n\nthe \":pageFileName\" page is displayed\n\n\nChecks if current browser url matches url of \npageFileName\n page object. \n\n\nIf the url matches expected pattern then \n\nthis.currentPage\n variable is set to \npageFileName\n page object.\n\n\nForms\n\n\nI fill the \":formName\" form with:\n\n\nAllows to fill the form with the name \n:formName\n and values provided as an array of inputs and values. The element with name \n:formName\n must be defined inside the \n\ncurrentPage\n page object.\n\n\nInput and values should be provided as an array for example:\n\n\nI \nfill the \"\nmyForm\n\" form with:\n\n\n  |\n inputElement\n    |\n value to be typed into field\n        |\n\n\n  |\n textareaElement\n |\n value to be typed into textarea\n     |\n\n\n  |\n radioElement\n    |\n radio value to be selected\n          |\n\n\n  |\n checkboxElement\n |\n checkbox label value to be selected\n |\n\n\n\n\n\n\nBy default we support all basic HTML field types (text inputs, checkboxes, radios, selects, files and textareas)\n\n\nIn order to use the default handlers the elements you use as input must follow pattern:\n\n\nFor inputs:\n\n\nthis.element = $('input')\n - element should point at input you want to fill\n\n\nFor textareas:\n\n\nthis.element = $('textarea')\n - element should point at textarea you want to fill\n\n\nFor file input:\n\n\nthis.element = $('input')\n - element should point at input you want to fill and value should a filename of file from \ndata\n directory\n\n\nFor selects:\n\n\nthis.element = $('select')\n - element should point at select and value should be an value of expected option\n\n\nFor radios:\n\n\nthis.element = $$('radio[name=\"name-of-radio\"]')\n - element should be an array of all radio input of given name and value should be an value of radio you wish to select\n\n\nFor checkboxes:\n\n\nCheckbox should have a html like:\n\n\n<\nlabel\n>\n\n  My checkbox\n  \n<\ninput\n \ntype\n=\n\"checkbox\"\n \nname\n=\n\"some-name\"\n/>\n\n\n</\nlabel\n>\n  \n\n\n\n\n\nthis.element = $$('checkbox[name=\"name-of-radio\"]')\n - element should be an array of all checkboxes of given name and value should be a text from label of checkbox you want to fill\n\n\nYou can use all kind of transformers to as a values for fields.\n\n\nthe \":formName\" form is filled with:\n\n\nThe same as \nI fill the \":formName\" form with:\n but allows to check if a form is filled with a given set of values.\n\n\nYou can use all kind of transformers to as a expected values for fields.\n\n\nThe only difference is for file fields. You cannot check uploaded files just like that, however we prepared a special type of handler\nthat allow to check for some information related to a specific file.\n\n\nLet's assume that after upload we display an information with a file name of a uploaded file.\n\n\nYou can use a special handler that requires to set a element with a postfix \nUploaded\n. This will check if a value of that element is the same as you expected.\n\n\nFor example you can write a step like this:\n\n\nthe \"\nmyform\n\" form is filled with:\n\n\n  |\n myFileUploaded\n |\n file.txt\n |\n\n\n\n\n\n\nKeep in mind that the element name must end with \nUploaded\n for example:\n\n\nthis.myFileUploaded = $('p.some-file')\n\n\nthe error messages should be displayed:\n\n\nAllows you to specify the error messages that should be displayed for a specific elements.\n\n\nThis step requires an array of format:\n\n\nthe error messages should be displayed:\n\n\n  |\n myElement\n |\n my error message\n |\n\n\n\n\n\n\nYou can use dictionaries in this step as follows:\n\n\nthe error messages should be displayed:\n\n\n  |\n myElement\n |\n d:dictionaryName:dictionaryKey\n |\n\n\n\n\n\n\nElements\n\n\nI infinitely scroll to the \":elementName\" element\n\n\nAllows to scroll through infinite scroll mechanism. \n\n\nThe \n:elementName\n is a name of a selector for loading trigger.\n\n\nI wait for \":expectedConditionName\" of the \":elementName\" element\n\n\nWaits till element \n:elementName\n from \nthis.currentPage\n meets criteria specified by \n:expectedConditionName\n.\n\n\nYou can use any of the Protractor's expected condition:\n\n\n\n\nvisibilityOf\n\n\ninvisibilityOf\n\n\n\n\netc.\n\n\nRead more in Protractor's API documentation.\n\n\nI wait for the \":elementName\" element to disappear\n\n\nWaits till element \n:elementName\n disappears.\n\n\nI scroll to the \":elementName\" element\n\n\nScrolls to element \n:elementName\n of \nthis.currentPage\n. The element will be on bottom of the page.\n\n\nI infinitely scroll to the \":elementName\" element\n\n\nAllows to scroll till \n:elementName\n is visible. Useful for infinite scrolling functionality.\n\n\nI press the \":keyName\" key\n\n\nPerforms a key press operation on \n:keyName\n key.\n\n\nI click the \":elementName\" element\n\n\nPerforms a click action on element \n:elementName\n from `this.currentPage'\n\n\nThe child element must be specified by \n:elementName\n and must be available in \nthis.currentPage\n.\n\n\nI store the \":elementName\" element text as \":variableName\" variable\n\n\nStores the text from element \n:elementName\n of \nthis.currentPage\n under the \n:variableName\n so you can use it later.\n\n\nI update the \":elementName\" element text as \":variableName\" variable\n\n\nUpdates the variable \n:variableName\n value by value from element \n:elementName\n of \nthis.currentPage\n.\n\n\nI store the \":elementName\" element text matched by \":matchingRegex\" as \":variableName\" variable\n\n\nStores the part of the element \n:elementName\n text, that matches the \n:matchingRegex\n under the \n:variableName\n for later use.\n\n\nthe \":elementName\"\" element is visible\n\n\nChecks if element \n:elementName\n is visible and clickable\n\n\nthe \":elementName\"\" element is not visible\n\n\nChecks if element \n:elementName\n is available in HTML DOM but is not visible and clickable\n\n\nthe \":elementName\" element is disabled\n\n\nChecks if element is disabled\n\n\nI store table \":tableRow\" rows as \":variableName\" with columns:\n\n\nAllows to store a row specified columns from a table \n:tableRow\n and save it under \n:variableName\n as an array of objects.\n\n\nThis step requires a table of columns elements, for example:\n\n\nI \nstore table \"\nsomeRow\n\" rows as \"\nsomeVariable\n\" with columns:\n\n\n  |\n firstName\n |\n\n\n  |\n lastName\n  |\n\n\n  |\n id\n        |\n\n\n\n\n\n\nIn order to make it work there must be not only array element \nthis.someRow = $$('.rows')\n in \nthis.currentPage\n, but also\nelement \nthis.firstName = $('.firstName');\n and so on.\n\n\nThe result of this step is an array of:\n\n\n[\n\n  \n[\n\n    \n'firsRowFirstNameValue'\n,\n\n    \n'firsRowLastNameValue'\n\n    \n'firsRowIdValue'\n\n  \n]\n\n  \n...\n\n\n]\n\n\n\n\n\n\nthere are following elements in table \":elementName\":\n\n\nAllows to check if a child elements of \n:elementName\n have a specified content.\n\n\nThis steps allows you to specify an array of child elements that will be checked against expected values.\n\n\nFor example:\n\n\nthere are following elements in table \"\nmyTable\n\":\n\n\n  |\n id\n  |\n firstName\n |\n lastName\n |\n\n\n  |\n t:1\n |\n t:Adam\n    |\n t:Doe\n    |\n\n\n  |\n t:2\n |\n t:John\n    |\n t:Doe\n    |\n\n\n\n\n\n\nFirst row must specify columns elements. Starting from second row we must provide a matchers for each row that must be displayed.\n\n\nThis step checks exact match, so if the table has 5 rows, there must be a 5 rows in this table.\n\n\nWe can specify only a set of columns (for example if a table has 5 columns, we can specify only 1).\n\n\nthere are \"numberExpression\" following elements for element \":elementName\":\n\n\nAllows to check if a child elements of \n:elementName\n have a specified content. Element should be an array, for example:\n\n\n<\ntable\n>\n\n  \n<\ntr\n>\n\n    \n<\ntd\n>\n1\n</\ntd\n>\n\n  \n</\ntr\n>\n\n  \n<\ntr\n>\n\n    \n<\ntd\n>\n2\n</\ntd\n>\n\n  \n</\ntr\n>\n   \n\n</\ntable\n>\n\n\n\n\n\n\nfor this case the \n:elementName\n should be specified as \n$$('table tr')\n.\n\n\nAllows to check if a number of elements is the one that we expect.\n\n\nnumberExpression\n is a supported expression from \nchai.js\n library:\n\n\n\n\n\n\nequal N\n where N is a number\n\n\n\n\n\n\nat least N\n where N is a number\n\n\n\n\n\n\nabove N\n where N is a number\n\n\n\n\n\n\nbelow N\n where N is a number\n\n\n\n\n\n\nwithin N M\n where N and M are a numbers\n\n\n\n\n\n\nand so on. You can check expressions on \nchai.js\n API dock for BDD.\n\n\nThis step requires an array of elements to be checked. For example:\n\n\nthere are \"\nequal 5\n\" following elements for element \"\nmyList\n\":\n\n\n  |\n viewButton\n |\n f:isClickable\n |\n\n\n  |\n id\n         |\n r:idRegex\n     |\n\n\n\n\n\n\nThe child elements must be an elements, for example \nthis.viewButton = $('button.viewButton');\n.\n\n\nYou can use all kind of matchers here.\n\n\nthere is element \":elementName\" with value \":matcher\"\n\n\nAllows to check if \n:elementName\n has a value that matches the \n:matcher\n.\n\n\nthere is no element \":elementName\" with value \":matcherName\"\n\n\nAllows to check if there is no \n:elementName\n that matches the \n:matcher\n.\n\n\nthere are \"numberExpression\" \":elementName\" elements\n\n\nAllows to check if a number of \n:elementName\n elements is the same as we expect.\n\n\nnumberExpression\n is a supported expression from \nchai.js\n library:\n\n\n\n\n\n\nequal N\n where N is a number\n\n\n\n\n\n\nat least N\n where N is a number\n\n\n\n\n\n\nabove N\n where N is a number\n\n\n\n\n\n\nbelow N\n where N is a number\n\n\n\n\n\n\nwithin N M\n where N and M are a numbers\n\n\n\n\n\n\nand so on. You can check expressions on \nchai.js\n API dock for BDD.\n\n\n:elementName\n should be specified as an array, for example:\n\n\n<\ntable\n>\n\n  \n<\ntr\n>\n\n    \n<\ntd\n>\n1\n</\ntd\n>\n\n  \n</\ntr\n>\n\n  \n<\ntr\n>\n\n    \n<\ntd\n>\n2\n</\ntd\n>\n\n  \n</\ntr\n>\n   \n\n</\ntable\n>\n\n\n\n\n\n\nfor this case the \n:elementName\n should be specified as \n$$('table tr')\n.\n\n\nevery \":elementName\" element should have the same value for element \":columnElementName\"\n\n\nAllows to check if every row defined by \n:elementName\n has the same value for a column \n:columnElementName\n.\n\n\n:elementName\n must be an array of elements\n\n\n:columnElementName\n must be an element, for example:\n\n\n<\ntable\n>\n\n  \n<\ntr\n>\n\n    \n<\ntd\n>\n1\n</\ntd\n>\n\n  \n</\ntr\n>\n\n  \n<\ntr\n>\n\n    \n<\ntd\n>\n1\n</\ntd\n>\n\n  \n</\ntr\n>\n   \n\n</\ntable\n>\n\n\n\n\n\n\nfor this case the \n:elementName\n should be specified as \n$$('table tr')\n and we can specify column element\n\nthis.myColumn = $('td');\n. This allows us to write:\n\n\nevery \"myElement\" element should have the same value for element \"myColumn\"\n\n\nthe element \":elementName\" should have an item with values:\n\n\nAllows to check if any of the child elements of \n:elementName\n have a specified content (one matching element is enough). Element should be an array, for example:\n\n\n<\ntable\n>\n\n  \n<\ntr\n>\n\n    \n<\ntd\n>\n1\n</\ntd\n>\n\n  \n</\ntr\n>\n\n  \n<\ntr\n>\n\n    \n<\ntd\n>\n2\n</\ntd\n>\n\n  \n</\ntr\n>\n   \n\n</\ntable\n>\n\n\n\n\n\n\nfor this case the \n:elementName\n should be specified as \n$$('table tr')\n.\n\n\nThis step requires an array of elements to be checked. For example:\n\n\nthe element \"\nmyList\n\" should have an item with values:\n\n\n  |\n id\n |\n t:1\n |\n\n\n\n\n\n\nThe child elements must be an elements, for example \nthis.id = $('td');\n.\n\n\nYou can use all kind of matchers here.\n\n\nthe element \":elementName\" should not have an item with values:\n\n\nAllows to check if the child elements of \n:elementName\n have a different content than that given in the table. Element should be an array, for example:\n\n\n<\ntable\n>\n\n  \n<\ntr\n>\n\n    \n<\ntd\n>\n1\n</\ntd\n>\n\n  \n</\ntr\n>\n\n  \n<\ntr\n>\n\n    \n<\ntd\n>\n2\n</\ntd\n>\n\n  \n</\ntr\n>\n   \n\n</\ntable\n>\n\n\n\n\n\n\nfor this case the \n:elementName\n should be specified as \n$$('table tr')\n.\n\n\nThis step requires an array of elements to be checked. For example:\n\n\nthe element \"\nmyList\n\" should have an item with values:\n\n\n  |\n id\n |\n t:does-not-exist\n |\n\n\n\n\n\n\nThe child elements must be an elements, for example \nthis.id = $('td');\n.\n\n\nYou can use all kind of matchers here.\n\n\nI drag \":elementDrag\" element and drop over \":elementDrop\" element\n\n\nClicks on \n:elementDrag\n and moves it onto \n:elementDrop\n while left mouse button is pressed, and then release it.\n\n\nNote: This step is not working on HTML5!\n\n\nEmails\n\n\nthe email has been sent and contains:\n\n\nChecks if there is an email on the configured mailing service.\n\n\nThis steps requires an array of filters to be applied to mailbox in order to find an email you're looking for.\n\n\nYou can do this like this:\n\n\nthe email has been sent and contains:\n\n\n| html_body\n |\n t:some value\n | | |\n\n\n\n\n\n\nThe number of columns is always 4, but depending form a filter you have to use all of them or only some.\n\n\nWe do support filtering by any property returned in MailTrap Api response format. Go check \nExtending Kakunin\n for more information.\n\n\nThere are 2 custom filters:\n\n\nthe email has been sent and contains:\n\n\n| currentUser\n | | | |\n\n\n\n\n\n\nThis one checks if the user saved in \nthis.currentUser\n variable is a recipient of an email. This is done by comparing \nemail\n property of \nthis.currentUser\n object to the one returned by email.\n\n\nthe email has been sent and contains:\n\n\n| file\n |\n t:fileName\n |\n r:fileExtension\n |\n sizeInBytes\n |\n\n\n\n\n\n\nThis one is looking for an attachment with a name matching \nt:fileName\n, extension matching \nr:fileExtension\n, \nsizeInBytes\n as a minimum bytes size.\n\n\nYou can use the same filter multiple times:\n\n\nthe email has been sent and contains:\n\n\n| file\n |\n t:fileName\n      |\n r:fileExtension\n |\n sizeInBytes\n |\n\n\n| file\n |\n t:otherfileName\n |\n r:fileExtension\n |\n sizeInBytes\n |\n\n\n\n\n\n\nThis will look for an email with 2 attachments.\n\n\nI store the email content matched by \":regex\" as \":variableName\" variable\n\n\nChecks if there is an email on the configured mailing service and stores text body matched by regex inside variableStore.\n\n\nThis step takes the first email from the inbox, in order to find an email you're looking for. It clears inbox before sending the email.\n\n\nThis step also supports transformers.\n\n\nYou can do this like this:\n\n\nI \nstore the email content matched by \"\nYour temporary password: ([a-zA-Z0-9]{8})\n\" as \"\npassword\n\" variable\n\n\n\n\n\n\nor\n\n\nI \nstore the email content matched by \"\nd:EmailContentDictionary:password\n\" as \"\npassword\n\" variable\n\n\n\n\n\n\nFiles\n\n\nthe file \":fileName\" should be downloaded\n\n\nChecks if a file with name \n:fileName\n was downloaded.\n\n\nThis step does not support matchers or regular expressions, so the name must be exact match. However you can use\nvariable store here.\n\n\nLet's assume there is a variable \nmyFile\n with a value \nsuper-file\n in variable store.\n\n\nYou can write \nthe file \"v:myFile.zip\" should be downloaded\n to check if a file \nsuper-file.zip\n was downloaded. \n\n\nthe file \":fileName\" contains table data stored under \":variableName\" variable\n\n\nThis step allows you to compare an xls/xlsx file \n:fileName\n with an existing data stored under \n:variableName\n variable.\n\n\nThe data under \n:variableName\n must be an array of objects representing each row of file. \n\n\nGenerators\n\n\nI generate random \":generator:param:param\" as \":variableName\"\n\n\nAllows to generate a random value using the generator specified by \n:generator:param:param\n.\n\n\nThe generator must be defined inside the any of the \ngenerators\n directories specified in \nkakunin.conf.js\n file \ndefault: generators\n.\n\n\nIf the generator exists, then the value will be saved under the \n:variableName\n and can be accessed by:\n\n\n\n\n\n\nsteps using variable store\n\n\n\n\n\n\nby calling \nvariableStore.getVariableValue(:variableName)\n\n\n\n\n\n\nby using variable store transformer on supported steps \nv:variableName\n\n\n\n\n\n\nDebug\n\n\nI pause\n\n\nPauses tests execution and allows to continue manually by pressing combination of \nctrl+c\n inside terminal.\n\n\nI wait for \":seconds\" seconds\n\n\nWaits with execution of next step for an amount provided by parameter \n:seconds\n.\n\n\nI start performance monitor mode\n\n\nIt starts performance monitor mode. \n\n\nKeep in mind that REST API must be started on the port which must configured in \nkakunin.conf.js\n - \nserverPort: 8887\n.\n\n\nMore details can be found in documentation file \nperformance-testing.md\n.\n\n\nI save performance report file as \"fileName\"\n\n\nIt saves \n.har\n file with a name \nfileName\n in \nreports/performance\n catalog. \n\n\nFor example: \nexampleReport-1511470954552.har\n\n\nData is generated during the test - network tab in Chrome Chrome console.\n\n\nKeep in mind:\n\n\n\n\n\n\nI start performance monitor mode\n must be used before this step\n\n\n\n\n\n\nbrowserMob.port\n must be configured in \nkakunin.conf.js\n\n\n\n\n\n\nbrowserMob.host\n must be configured in \nkakunin.conf.js\n\n\n\n\n\n\nMore details can be found in documentation file \nperformance-testing.md\n.\n\n\nthe requests should take a maximum of \"maxTiming\" milliseconds\n\n\nIt compares every \nTTFB\n timing value from previously saved \n.har\n report with a \nmaxTiming\n value.\n\n\nSlow requests are listed in your terminal in red colour.\n\n\nKeep in mind that \nI start performance monitor mode\n and \nI save performance report file as \"fileName\"\n steps must be executed before this one!",
            "title": "Built-in steps"
        },
        {
            "location": "/steps/#navigation",
            "text": "",
            "title": "Navigation"
        },
        {
            "location": "/steps/#i-visit-the-pagefilename-page",
            "text": "Visits the url of the page object with  :pageFileName  name.  In order to make it work we create a page object file with a name of  :pageFileName .  For example in case of:  I visit the \"myPage\" page  there should be a file  myPage.js  inside the  pages  directory.  If we have a page object with a name  somePageObject.js  defined inside  pages  directory then:  Given I visit the \"somePageObject\" page  will set  this.currentPage  variable to  somePageObject  page and we should end up on  somePageObject  url.",
            "title": "I visit the \":pageFileName\" page"
        },
        {
            "location": "/steps/#i-visit-the-pagefilename-page-with-parameters",
            "text": "The same as  I visit the \":pageFileName\" page  except allows to pass url parameters.  If url of  myPage  is defined as  this.url = /orders/:orderId/products/:productId  then we can use this step to visit this page by:  I  visit the \" myPage \" page with parameters:      |  orderId    |  1  |      |  productId  |  2  |   this will result in visiting the  /orders/1/product/2  page.",
            "title": "I visit the \":pageFileName\" page with parameters:"
        },
        {
            "location": "/steps/#the-pagefilename-page-is-displayed",
            "text": "Checks if current browser url matches url of  pageFileName  page object.   If the url matches expected pattern then  this.currentPage  variable is set to  pageFileName  page object.",
            "title": "the \":pageFileName\" page is displayed"
        },
        {
            "location": "/steps/#forms",
            "text": "",
            "title": "Forms"
        },
        {
            "location": "/steps/#i-fill-the-formname-form-with",
            "text": "Allows to fill the form with the name  :formName  and values provided as an array of inputs and values. The element with name  :formName  must be defined inside the  currentPage  page object.  Input and values should be provided as an array for example:  I  fill the \" myForm \" form with:    |  inputElement     |  value to be typed into field         |    |  textareaElement  |  value to be typed into textarea      |    |  radioElement     |  radio value to be selected           |    |  checkboxElement  |  checkbox label value to be selected  |   By default we support all basic HTML field types (text inputs, checkboxes, radios, selects, files and textareas)  In order to use the default handlers the elements you use as input must follow pattern:  For inputs:  this.element = $('input')  - element should point at input you want to fill  For textareas:  this.element = $('textarea')  - element should point at textarea you want to fill  For file input:  this.element = $('input')  - element should point at input you want to fill and value should a filename of file from  data  directory  For selects:  this.element = $('select')  - element should point at select and value should be an value of expected option  For radios:  this.element = $$('radio[name=\"name-of-radio\"]')  - element should be an array of all radio input of given name and value should be an value of radio you wish to select  For checkboxes:  Checkbox should have a html like:  < label > \n  My checkbox\n   < input   type = \"checkbox\"   name = \"some-name\" />  </ label >     this.element = $$('checkbox[name=\"name-of-radio\"]')  - element should be an array of all checkboxes of given name and value should be a text from label of checkbox you want to fill  You can use all kind of transformers to as a values for fields.",
            "title": "I fill the \":formName\" form with:"
        },
        {
            "location": "/steps/#the-formname-form-is-filled-with",
            "text": "The same as  I fill the \":formName\" form with:  but allows to check if a form is filled with a given set of values.  You can use all kind of transformers to as a expected values for fields.  The only difference is for file fields. You cannot check uploaded files just like that, however we prepared a special type of handler\nthat allow to check for some information related to a specific file.  Let's assume that after upload we display an information with a file name of a uploaded file.  You can use a special handler that requires to set a element with a postfix  Uploaded . This will check if a value of that element is the same as you expected.  For example you can write a step like this:  the \" myform \" form is filled with:    |  myFileUploaded  |  file.txt  |   Keep in mind that the element name must end with  Uploaded  for example:  this.myFileUploaded = $('p.some-file')",
            "title": "the \":formName\" form is filled with:"
        },
        {
            "location": "/steps/#the-error-messages-should-be-displayed",
            "text": "Allows you to specify the error messages that should be displayed for a specific elements.  This step requires an array of format:  the error messages should be displayed:    |  myElement  |  my error message  |   You can use dictionaries in this step as follows:  the error messages should be displayed:    |  myElement  |  d:dictionaryName:dictionaryKey  |",
            "title": "the error messages should be displayed:"
        },
        {
            "location": "/steps/#elements",
            "text": "",
            "title": "Elements"
        },
        {
            "location": "/steps/#i-infinitely-scroll-to-the-elementname-element",
            "text": "Allows to scroll through infinite scroll mechanism.   The  :elementName  is a name of a selector for loading trigger.",
            "title": "I infinitely scroll to the \":elementName\" element"
        },
        {
            "location": "/steps/#i-wait-for-expectedconditionname-of-the-elementname-element",
            "text": "Waits till element  :elementName  from  this.currentPage  meets criteria specified by  :expectedConditionName .  You can use any of the Protractor's expected condition:   visibilityOf  invisibilityOf   etc.  Read more in Protractor's API documentation.",
            "title": "I wait for \":expectedConditionName\" of the \":elementName\" element"
        },
        {
            "location": "/steps/#i-wait-for-the-elementname-element-to-disappear",
            "text": "Waits till element  :elementName  disappears.",
            "title": "I wait for the \":elementName\" element to disappear"
        },
        {
            "location": "/steps/#i-scroll-to-the-elementname-element",
            "text": "Scrolls to element  :elementName  of  this.currentPage . The element will be on bottom of the page.",
            "title": "I scroll to the \":elementName\" element"
        },
        {
            "location": "/steps/#i-infinitely-scroll-to-the-elementname-element_1",
            "text": "Allows to scroll till  :elementName  is visible. Useful for infinite scrolling functionality.",
            "title": "I infinitely scroll to the \":elementName\" element"
        },
        {
            "location": "/steps/#i-press-the-keyname-key",
            "text": "Performs a key press operation on  :keyName  key.",
            "title": "I press the \":keyName\" key"
        },
        {
            "location": "/steps/#i-click-the-elementname-element",
            "text": "Performs a click action on element  :elementName  from `this.currentPage'  The child element must be specified by  :elementName  and must be available in  this.currentPage .",
            "title": "I click the \":elementName\" element"
        },
        {
            "location": "/steps/#i-store-the-elementname-element-text-as-variablename-variable",
            "text": "Stores the text from element  :elementName  of  this.currentPage  under the  :variableName  so you can use it later.",
            "title": "I store the \":elementName\" element text as \":variableName\" variable"
        },
        {
            "location": "/steps/#i-update-the-elementname-element-text-as-variablename-variable",
            "text": "Updates the variable  :variableName  value by value from element  :elementName  of  this.currentPage .",
            "title": "I update the \":elementName\" element text as \":variableName\" variable"
        },
        {
            "location": "/steps/#i-store-the-elementname-element-text-matched-by-matchingregex-as-variablename-variable",
            "text": "Stores the part of the element  :elementName  text, that matches the  :matchingRegex  under the  :variableName  for later use.",
            "title": "I store the \":elementName\" element text matched by \":matchingRegex\" as \":variableName\" variable"
        },
        {
            "location": "/steps/#the-elementname-element-is-visible",
            "text": "Checks if element  :elementName  is visible and clickable",
            "title": "the \":elementName\"\" element is visible"
        },
        {
            "location": "/steps/#the-elementname-element-is-not-visible",
            "text": "Checks if element  :elementName  is available in HTML DOM but is not visible and clickable",
            "title": "the \":elementName\"\" element is not visible"
        },
        {
            "location": "/steps/#the-elementname-element-is-disabled",
            "text": "Checks if element is disabled",
            "title": "the \":elementName\" element is disabled"
        },
        {
            "location": "/steps/#i-store-table-tablerow-rows-as-variablename-with-columns",
            "text": "Allows to store a row specified columns from a table  :tableRow  and save it under  :variableName  as an array of objects.  This step requires a table of columns elements, for example:  I  store table \" someRow \" rows as \" someVariable \" with columns:    |  firstName  |    |  lastName   |    |  id         |   In order to make it work there must be not only array element  this.someRow = $$('.rows')  in  this.currentPage , but also\nelement  this.firstName = $('.firstName');  and so on.  The result of this step is an array of:  [ \n   [ \n     'firsRowFirstNameValue' , \n     'firsRowLastNameValue' \n     'firsRowIdValue' \n   ] \n   ...  ]",
            "title": "I store table \":tableRow\" rows as \":variableName\" with columns:"
        },
        {
            "location": "/steps/#there-are-following-elements-in-table-elementname",
            "text": "Allows to check if a child elements of  :elementName  have a specified content.  This steps allows you to specify an array of child elements that will be checked against expected values.  For example:  there are following elements in table \" myTable \":    |  id   |  firstName  |  lastName  |    |  t:1  |  t:Adam     |  t:Doe     |    |  t:2  |  t:John     |  t:Doe     |   First row must specify columns elements. Starting from second row we must provide a matchers for each row that must be displayed.  This step checks exact match, so if the table has 5 rows, there must be a 5 rows in this table.  We can specify only a set of columns (for example if a table has 5 columns, we can specify only 1).",
            "title": "there are following elements in table \":elementName\":"
        },
        {
            "location": "/steps/#there-are-numberexpression-following-elements-for-element-elementname",
            "text": "Allows to check if a child elements of  :elementName  have a specified content. Element should be an array, for example:  < table > \n   < tr > \n     < td > 1 </ td > \n   </ tr > \n   < tr > \n     < td > 2 </ td > \n   </ tr >     </ table >   for this case the  :elementName  should be specified as  $$('table tr') .  Allows to check if a number of elements is the one that we expect.  numberExpression  is a supported expression from  chai.js  library:    equal N  where N is a number    at least N  where N is a number    above N  where N is a number    below N  where N is a number    within N M  where N and M are a numbers    and so on. You can check expressions on  chai.js  API dock for BDD.  This step requires an array of elements to be checked. For example:  there are \" equal 5 \" following elements for element \" myList \":    |  viewButton  |  f:isClickable  |    |  id          |  r:idRegex      |   The child elements must be an elements, for example  this.viewButton = $('button.viewButton'); .  You can use all kind of matchers here.",
            "title": "there are \"numberExpression\" following elements for element \":elementName\":"
        },
        {
            "location": "/steps/#there-is-element-elementname-with-value-matcher",
            "text": "Allows to check if  :elementName  has a value that matches the  :matcher .",
            "title": "there is element \":elementName\" with value \":matcher\""
        },
        {
            "location": "/steps/#there-is-no-element-elementname-with-value-matchername",
            "text": "Allows to check if there is no  :elementName  that matches the  :matcher .",
            "title": "there is no element \":elementName\" with value \":matcherName\""
        },
        {
            "location": "/steps/#there-are-numberexpression-elementname-elements",
            "text": "Allows to check if a number of  :elementName  elements is the same as we expect.  numberExpression  is a supported expression from  chai.js  library:    equal N  where N is a number    at least N  where N is a number    above N  where N is a number    below N  where N is a number    within N M  where N and M are a numbers    and so on. You can check expressions on  chai.js  API dock for BDD.  :elementName  should be specified as an array, for example:  < table > \n   < tr > \n     < td > 1 </ td > \n   </ tr > \n   < tr > \n     < td > 2 </ td > \n   </ tr >     </ table >   for this case the  :elementName  should be specified as  $$('table tr') .",
            "title": "there are \"numberExpression\" \":elementName\" elements"
        },
        {
            "location": "/steps/#every-elementname-element-should-have-the-same-value-for-element-columnelementname",
            "text": "Allows to check if every row defined by  :elementName  has the same value for a column  :columnElementName .  :elementName  must be an array of elements  :columnElementName  must be an element, for example:  < table > \n   < tr > \n     < td > 1 </ td > \n   </ tr > \n   < tr > \n     < td > 1 </ td > \n   </ tr >     </ table >   for this case the  :elementName  should be specified as  $$('table tr')  and we can specify column element this.myColumn = $('td'); . This allows us to write:  every \"myElement\" element should have the same value for element \"myColumn\"",
            "title": "every \":elementName\" element should have the same value for element \":columnElementName\""
        },
        {
            "location": "/steps/#the-element-elementname-should-have-an-item-with-values",
            "text": "Allows to check if any of the child elements of  :elementName  have a specified content (one matching element is enough). Element should be an array, for example:  < table > \n   < tr > \n     < td > 1 </ td > \n   </ tr > \n   < tr > \n     < td > 2 </ td > \n   </ tr >     </ table >   for this case the  :elementName  should be specified as  $$('table tr') .  This step requires an array of elements to be checked. For example:  the element \" myList \" should have an item with values:    |  id  |  t:1  |   The child elements must be an elements, for example  this.id = $('td'); .  You can use all kind of matchers here.",
            "title": "the element \":elementName\" should have an item with values:"
        },
        {
            "location": "/steps/#the-element-elementname-should-not-have-an-item-with-values",
            "text": "Allows to check if the child elements of  :elementName  have a different content than that given in the table. Element should be an array, for example:  < table > \n   < tr > \n     < td > 1 </ td > \n   </ tr > \n   < tr > \n     < td > 2 </ td > \n   </ tr >     </ table >   for this case the  :elementName  should be specified as  $$('table tr') .  This step requires an array of elements to be checked. For example:  the element \" myList \" should have an item with values:    |  id  |  t:does-not-exist  |   The child elements must be an elements, for example  this.id = $('td'); .  You can use all kind of matchers here.",
            "title": "the element \":elementName\" should not have an item with values:"
        },
        {
            "location": "/steps/#i-drag-elementdrag-element-and-drop-over-elementdrop-element",
            "text": "Clicks on  :elementDrag  and moves it onto  :elementDrop  while left mouse button is pressed, and then release it.  Note: This step is not working on HTML5!",
            "title": "I drag \":elementDrag\" element and drop over \":elementDrop\" element"
        },
        {
            "location": "/steps/#emails",
            "text": "",
            "title": "Emails"
        },
        {
            "location": "/steps/#the-email-has-been-sent-and-contains",
            "text": "Checks if there is an email on the configured mailing service.  This steps requires an array of filters to be applied to mailbox in order to find an email you're looking for.  You can do this like this:  the email has been sent and contains:  | html_body  |  t:some value  | | |   The number of columns is always 4, but depending form a filter you have to use all of them or only some.  We do support filtering by any property returned in MailTrap Api response format. Go check  Extending Kakunin  for more information.  There are 2 custom filters:  the email has been sent and contains:  | currentUser  | | | |   This one checks if the user saved in  this.currentUser  variable is a recipient of an email. This is done by comparing  email  property of  this.currentUser  object to the one returned by email.  the email has been sent and contains:  | file  |  t:fileName  |  r:fileExtension  |  sizeInBytes  |   This one is looking for an attachment with a name matching  t:fileName , extension matching  r:fileExtension ,  sizeInBytes  as a minimum bytes size.  You can use the same filter multiple times:  the email has been sent and contains:  | file  |  t:fileName       |  r:fileExtension  |  sizeInBytes  |  | file  |  t:otherfileName  |  r:fileExtension  |  sizeInBytes  |   This will look for an email with 2 attachments.",
            "title": "the email has been sent and contains:"
        },
        {
            "location": "/steps/#i-store-the-email-content-matched-by-regex-as-variablename-variable",
            "text": "Checks if there is an email on the configured mailing service and stores text body matched by regex inside variableStore.  This step takes the first email from the inbox, in order to find an email you're looking for. It clears inbox before sending the email.  This step also supports transformers.  You can do this like this:  I  store the email content matched by \" Your temporary password: ([a-zA-Z0-9]{8}) \" as \" password \" variable   or  I  store the email content matched by \" d:EmailContentDictionary:password \" as \" password \" variable",
            "title": "I store the email content matched by \":regex\" as \":variableName\" variable"
        },
        {
            "location": "/steps/#files",
            "text": "",
            "title": "Files"
        },
        {
            "location": "/steps/#the-file-filename-should-be-downloaded",
            "text": "Checks if a file with name  :fileName  was downloaded.  This step does not support matchers or regular expressions, so the name must be exact match. However you can use\nvariable store here.  Let's assume there is a variable  myFile  with a value  super-file  in variable store.  You can write  the file \"v:myFile.zip\" should be downloaded  to check if a file  super-file.zip  was downloaded.",
            "title": "the file \":fileName\" should be downloaded"
        },
        {
            "location": "/steps/#the-file-filename-contains-table-data-stored-under-variablename-variable",
            "text": "This step allows you to compare an xls/xlsx file  :fileName  with an existing data stored under  :variableName  variable.  The data under  :variableName  must be an array of objects representing each row of file.",
            "title": "the file \":fileName\" contains table data stored under \":variableName\" variable"
        },
        {
            "location": "/steps/#generators",
            "text": "",
            "title": "Generators"
        },
        {
            "location": "/steps/#i-generate-random-generatorparamparam-as-variablename",
            "text": "Allows to generate a random value using the generator specified by  :generator:param:param .  The generator must be defined inside the any of the  generators  directories specified in  kakunin.conf.js  file  default: generators .  If the generator exists, then the value will be saved under the  :variableName  and can be accessed by:    steps using variable store    by calling  variableStore.getVariableValue(:variableName)    by using variable store transformer on supported steps  v:variableName",
            "title": "I generate random \":generator:param:param\" as \":variableName\""
        },
        {
            "location": "/steps/#debug",
            "text": "",
            "title": "Debug"
        },
        {
            "location": "/steps/#i-pause",
            "text": "Pauses tests execution and allows to continue manually by pressing combination of  ctrl+c  inside terminal.",
            "title": "I pause"
        },
        {
            "location": "/steps/#i-wait-for-seconds-seconds",
            "text": "Waits with execution of next step for an amount provided by parameter  :seconds .",
            "title": "I wait for \":seconds\" seconds"
        },
        {
            "location": "/steps/#i-start-performance-monitor-mode",
            "text": "It starts performance monitor mode.   Keep in mind that REST API must be started on the port which must configured in  kakunin.conf.js  -  serverPort: 8887 .  More details can be found in documentation file  performance-testing.md .",
            "title": "I start performance monitor mode"
        },
        {
            "location": "/steps/#i-save-performance-report-file-as-filename",
            "text": "It saves  .har  file with a name  fileName  in  reports/performance  catalog.   For example:  exampleReport-1511470954552.har  Data is generated during the test - network tab in Chrome Chrome console.  Keep in mind:    I start performance monitor mode  must be used before this step    browserMob.port  must be configured in  kakunin.conf.js    browserMob.host  must be configured in  kakunin.conf.js    More details can be found in documentation file  performance-testing.md .",
            "title": "I save performance report file as \"fileName\""
        },
        {
            "location": "/steps/#the-requests-should-take-a-maximum-of-maxtiming-milliseconds",
            "text": "It compares every  TTFB  timing value from previously saved  .har  report with a  maxTiming  value.  Slow requests are listed in your terminal in red colour.  Keep in mind that  I start performance monitor mode  and  I save performance report file as \"fileName\"  steps must be executed before this one!",
            "title": "the requests should take a maximum of \"maxTiming\" milliseconds"
        },
        {
            "location": "/matchers/",
            "text": "Matchers allows you to check if a element content matches your expectation.\n\n\nFor example you can check if a value has a specified pattern or if a button is clickable.\n\n\nUsing matcher is very straightforward, for example: \nf:isClickable\n.\n\n\nMatchers can be used in most of the steps related to checking content (with exception of checking form values).\n\n\nKakunin comes with a set of built in matchers:\n\n\nVisibility matcher\n\n\nf:isVisible\n - checks if element is visible (must be in viewport and cannot be hidden behind any other element)\n\n\nInvisibility matcher\n\n\nf:isNotVisible\n - checks if element is not visible\n\n\nPresent matcher\n\n\nf:isPresent\n - checks if element is in html code (does not have to be visible)\n\n\nClickable matcher\n\n\nf:isClickable\n - checks if element is clickable\n\n\nNot clickable matcher\n\n\nf:isNotClickable\n - checks if element is not clickable\n\n\nAttribute matcher\n\n\nattribute:attributeName:regexName\n - allows to check if element has attribute with a name specified by \nattributeName\n and it has to \nhave a format passing \nregexName\n\n\nFor example, if there is an element:\n\n\n<p custom-attribute=\"123123\">some value</p>\n\n\nyou can check if attribute is an number by running: \nattribute:custom-attribute:number\n\n\nRegex matcher\n\n\nr:regexName\n - allows you to run a \nregexName\n against a text value of element\n\n\nRegexes have to be specified inside \nregex\n directory or be a kakunin built ones:\n\n\nnotEmpty\n - there must be a value\n\nnumber\n - must be a number\n\n\nYou can add your own matchers. In order to do so please read \nExtending Kakunin\n section.\n\n\nText matcher\n\n\nt:text you are looking for\n - allows you to check if an element contains a expected text",
            "title": "Matchers"
        },
        {
            "location": "/matchers/#visibility-matcher",
            "text": "f:isVisible  - checks if element is visible (must be in viewport and cannot be hidden behind any other element)",
            "title": "Visibility matcher"
        },
        {
            "location": "/matchers/#invisibility-matcher",
            "text": "f:isNotVisible  - checks if element is not visible",
            "title": "Invisibility matcher"
        },
        {
            "location": "/matchers/#present-matcher",
            "text": "f:isPresent  - checks if element is in html code (does not have to be visible)",
            "title": "Present matcher"
        },
        {
            "location": "/matchers/#clickable-matcher",
            "text": "f:isClickable  - checks if element is clickable",
            "title": "Clickable matcher"
        },
        {
            "location": "/matchers/#not-clickable-matcher",
            "text": "f:isNotClickable  - checks if element is not clickable",
            "title": "Not clickable matcher"
        },
        {
            "location": "/matchers/#attribute-matcher",
            "text": "attribute:attributeName:regexName  - allows to check if element has attribute with a name specified by  attributeName  and it has to \nhave a format passing  regexName  For example, if there is an element:  <p custom-attribute=\"123123\">some value</p>  you can check if attribute is an number by running:  attribute:custom-attribute:number",
            "title": "Attribute matcher"
        },
        {
            "location": "/matchers/#regex-matcher",
            "text": "r:regexName  - allows you to run a  regexName  against a text value of element  Regexes have to be specified inside  regex  directory or be a kakunin built ones:  notEmpty  - there must be a value number  - must be a number  You can add your own matchers. In order to do so please read  Extending Kakunin  section.",
            "title": "Regex matcher"
        },
        {
            "location": "/matchers/#text-matcher",
            "text": "t:text you are looking for  - allows you to check if an element contains a expected text",
            "title": "Text matcher"
        },
        {
            "location": "/transformers/",
            "text": "Transformers allow you to transform values passed to form steps.\n\n\nFor example a select requires to pass a value \n/options/1b30f17e-e445-4d28-a30c-dedad95829ab\n. This one is quite unreadable, but with the help of transformers you are\nable to write it like this: \nd:options:someOptionName\n.\n\n\nIn real-life example it will look similar to:\n\n\nI \nfill the \"\nmyForm\n\" form with:\n\n\n  |\n inputElement\n    |\n d:someDictionary:someKey\n            |\n\n\n  |\n textareaElement\n |\n g:someGenerator\n                     |\n\n\n  |\n radioElement\n    |\n v:someVariableName\n                  |\n\n\n  |\n checkboxElement\n |\n standard value\n                      |\n\n\n\n\n\n\nThere are 3 types of built-in transformers:\n\n\nDictionaries\n\n\nDictionaries allows you to transform a value A to value B using a simple key->value transformation.\n\n\nYou can run a dictionary transformer by providing dictionary prefix \nd:\n, specifying the dictionary name and key that should be used as a value provider. For example:\n\n\nd:myDictionaryName:myDictionaryKey\n\n\nthis example assumes that there is a dictionary that supports name \nmyDictionaryName\n and it has \nmyDictionarKey\n key.\n\n\nYou can read about dictionaries in \nExtending Kakunin\n section.\n\n\nGenerators\n\n\nGenerators allows you to generate a value by using a specified generator.\n\n\nThis can be done by: \ng:generatorName\n.\n\n\nIf a generator supports parameters then you can specify them by:\n\n\ng:generatorName:param1:param2:...:paramN\n\n\nYou can read more about generators in \nExtending Kakunin\n section.\n\n\nVariable store\n\n\nVariable store allows you to fill the form with a value that was saved in previous steps of current running scenario.\n\n\nThis can be done by:\n\n\nv:variableName\n\n\nYou can read more about variable store in \nExtending Kakunin\n section",
            "title": "Transformers"
        },
        {
            "location": "/transformers/#dictionaries",
            "text": "Dictionaries allows you to transform a value A to value B using a simple key->value transformation.  You can run a dictionary transformer by providing dictionary prefix  d: , specifying the dictionary name and key that should be used as a value provider. For example:  d:myDictionaryName:myDictionaryKey  this example assumes that there is a dictionary that supports name  myDictionaryName  and it has  myDictionarKey  key.  You can read about dictionaries in  Extending Kakunin  section.",
            "title": "Dictionaries"
        },
        {
            "location": "/transformers/#generators",
            "text": "Generators allows you to generate a value by using a specified generator.  This can be done by:  g:generatorName .  If a generator supports parameters then you can specify them by:  g:generatorName:param1:param2:...:paramN  You can read more about generators in  Extending Kakunin  section.",
            "title": "Generators"
        },
        {
            "location": "/transformers/#variable-store",
            "text": "Variable store allows you to fill the form with a value that was saved in previous steps of current running scenario.  This can be done by:  v:variableName  You can read more about variable store in  Extending Kakunin  section",
            "title": "Variable store"
        },
        {
            "location": "/performance-testing/",
            "text": "Performance testing is possible thanks to \nbrowsermob-proxy\n.\n\n\nIt saves all data from network tab (Google Chrome console) which is generated during the test.\n\n\nThere is a possibility to compare \nTTFB\n value with a maximum given one. \n\n\nTTFB\n (Time to first byte) measures the duration from the client making an HTTP request to the first byte of a response being received by the client's browser.\n\n\nMore details can be found in documentation - \nBuilt-in steps\n section.\n\n\nWhat needs to be done?\n\n\nGet started\n\n\n\n\n\n\nDownload \nbrowsermob-proxy\n from \nhttps://github.com/lightbody/browsermob-proxy\n\n\n\n\n\n\nNavigate in terminal to the catalog\n\n\n\n\n\n\nUse following command to start the REST API\n\n\n\n\n\n\n./browsermob-proxy -port 8887\n\n\n\n\n\nConfiguration\n\n\n\n\nAdd \nbrowsermob-proxy\n configuration to \nkakunin.conf.js\n\n\n\n\nYou can use one of the following methods to configure browsermob-proxy:\n\n\n\n\n\n\nnpm run kakunin init -- --advanced\n and go through the process\n\n\n\n\n\n\nor add it manually to the config file:\n\n\n\n\n\n\n    \n\"browserMob\"\n:\n \n{\n\n      \n\"serverPort\"\n:\n \n8887\n,\n\n      \n\"port\"\n:\n \n8888\n,\n\n      \n\"host\"\n:\n \n\"localhost\"\n\n    \n}\n\n\n\n\n\n\nRun tests\n\n\n\n\n\n\nperformance steps\n must be used in the scenario where you are testing performance\n\n\n\n\n\n\nScenario must have a tag \n@performance\n\n\n\n\n\n\nRun tests with special parameter:\n\n\n\n\n\n\nnpm run kakunin -- --performance\n\n\n\n\n\nResults\n\n\n\n\n.har\n files are saved in catalog \nreports/performance/*.har",
            "title": "Performance testing"
        },
        {
            "location": "/performance-testing/#what-needs-to-be-done",
            "text": "",
            "title": "What needs to be done?"
        },
        {
            "location": "/performance-testing/#get-started",
            "text": "Download  browsermob-proxy  from  https://github.com/lightbody/browsermob-proxy    Navigate in terminal to the catalog    Use following command to start the REST API    ./browsermob-proxy -port 8887",
            "title": "Get started"
        },
        {
            "location": "/performance-testing/#configuration",
            "text": "Add  browsermob-proxy  configuration to  kakunin.conf.js   You can use one of the following methods to configure browsermob-proxy:    npm run kakunin init -- --advanced  and go through the process    or add it manually to the config file:         \"browserMob\" :   { \n       \"serverPort\" :   8887 , \n       \"port\" :   8888 , \n       \"host\" :   \"localhost\" \n     }",
            "title": "Configuration"
        },
        {
            "location": "/performance-testing/#run-tests",
            "text": "performance steps  must be used in the scenario where you are testing performance    Scenario must have a tag  @performance    Run tests with special parameter:    npm run kakunin -- --performance",
            "title": "Run tests"
        },
        {
            "location": "/performance-testing/#results",
            "text": ".har  files are saved in catalog  reports/performance/*.har",
            "title": "Results"
        },
        {
            "location": "/extending/",
            "text": "Kakunin allows you to easily add a custom code in order to extend it's functionality.\n\n\nInternal services\n\n\nRegex builder\n\n\nRegex builder is a special builder for creating \nRegExp\n objects based on regexp name. Internally it has access to not only to all built-in \nregular expression files, but also custom ones specified by user. \n\n\nconst\n \n{\n \nregexBuilder\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\n\nconst\n \nmyRegex\n \n=\n \nregexBuilder\n.\nbuildRegex\n(\n'r:number'\n);\n\n\n\n//myRegex will contain RegExp object that matches regular expression under the name \"number\" in regexes file.\n\n\n\n\n\n\nVariable store\n\n\nVariable store allows you to store and read some values to be used during given scenario.\n\n\nconst\n \n{\n \nvariableStore\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\n\nvariableStore\n.\nstoreVariable\n(\n'some-name'\n,\n \n'some-value'\n);\n\n\n\nconst\n \nmyValue\n \n=\n \nvariableStore\n.\ngetVariableValue\n(\n'some-name'\n);\n \n//contains 'some-value'\n\n\n\n\n\n\nUser provider\n\n\nKakunin comes with functionality that allows you to easily load credentials for a given account type - \nUserProvider\n.\n\n\nIn \nkakunin.conf.js\n you can find a section \naccounts\n.\n\n\nThe structure it has is very simple: \n\n\n\"accounts\"\n:\n \n{\n\n    \n\"someAccount\"\n:\n \n{\n\n        \n\"accounts\"\n:\n \n[\n\n            \n{\n\n                \n\"email\"\n:\n \n\"\"\n,\n\n                \n\"password\"\n:\n \n\"\"\n\n            \n}\n\n        \n]\n\n    \n}\n\n\n}\n\n\n\n\n\n\nsomeAccount\n - the name of accounts group\n\n\naccounts\n - an array of account credentials (in order to be able to check if a \ncurrentUser\n got an email, this has to have an \nemail\n key, otherwise account can have any kind of\nproperties)\n\n\nUse provider is accessible inside any kind of a step by calling \nthis.userProvider\n. It comes with a single method:\n\n\nthis.userProvider.getUser(groupName)\n - returns an account credentials for a given user group.\n\n\nIt is a good practice to save a current user in \nthis.currentUser\n variable for a email checking service.\n\n\nAdding custom code\n\n\nCustom step\n\n\nIn order to add a custom step, you have to create inside of a directory specified as \nstep_definitions\n in kakunin configuration file \ndefault: /step_definitions\n.\n\n\nWe're using \ncucumber-js 2.X\n so in order to add custom step you have to use \ndefineSupportCode\n method like this:\n\n\n  \nconst\n \n{\n \ndefineSupportCode\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\n  \ndefineSupportCode\n(({\n \nWhen\n \n})\n \n=>\n \n{\n\n    \nWhen\n(\n/^I use kakunin$/\n,\n \nfunction\n()\n \n{\n\n      \nexpect\n(\ntrue\n).\nto\n.\nequal\n(\ntrue\n);\n\n    \n});\n\n  \n});\n\n\n\n\n\n\nPage objects\n\n\nKakunin comes with some built-in page objects, that should be used as a base for your page objects.\n\n\nIn order to create a custom one, create a file inside the \npages\n directory and extend the \nBasePage\n from kakunin package.\n\n\nconst\n \n{\n \nBasePage\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\n\nclass\n \nMyPageObject\n \nextends\n \nBasePage\n \n{\n\n  \nconstructor\n()\n \n{\n\n    \nthis\n.\nmyElement\n \n=\n \nelement\n(\nby\n.\ncss\n(\n'.some-elemnt'\n));\n\n  \n}\n\n\n}\n\n\n\nmodule\n.\nexports\n \n=\n \nMyPageObject\n;\n\n\n\n\n\n\nMatchers\n\n\nMatchers are used to compare if given value is matching our expectation. For example if a value in table is a number.\n\n\nYou can add your own matcher as below:\n\n\nconst\n \n{\n \nmatchers\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\n\nclass\n \nMyMatcher\n \n{\n\n  \nisSatisfiedBy\n(\nprefix\n,\n \nname\n)\n \n{\n\n    \nreturn\n \nprefix\n \n===\n \n'm:'\n \n&&\n \nname\n \n===\n \n'pending'\n;\n\n  \n}\n\n\n  \nmatch\n(\nprotractorElement\n,\n \nmatcherName\n)\n \n{\n\n    \nreturn\n \nprotractorElement\n.\ngetText\n().\nthen\n((\nvalue\n)\n \n=>\n \nvalue\n \n===\n \n'pending'\n);\n \n  \n}\n\n\n}\n\n\n\nmatchers\n.\naddMatcher\n(\nnew\n \nMyMatcher\n());\n\n\n\n\n\n\nDictionaries\n\n\nDictionaries allows you to present complicated values in much more readable way. For example if an element must be\nin a form of IRI \n/some-resource/123-123-123-23\n and you wish to use \npending-resource\n as it's alias.\n\n\nYou can add your own dictionary:\n\n\nconst\n \n{\n \ndictionaries\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\nconst\n \n{\n \nBaseDictionary\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\n\nclass\n \nTestDictionary\n \nextends\n \nBaseDictionary\n \n{\n\n  \nconstructor\n()\n \n{\n\n    \nsuper\n(\n'name-of-dictionary'\n,\n \n{\n\n      \n'pending-resource'\n:\n \n'/some-resource/123-123-123-23'\n,\n\n      \n'test-value'\n:\n \n'some other value'\n\n    \n});\n\n  \n}\n\n\n}\n\n\n\ndictionaries\n.\naddDictionary\n(\nnew\n \nTestDictionary\n());\n\n\n\n\n\n\nGenerators\n\n\nGenerators allows you to create random values\n\n\nYou can add your own generator:\n\n\nconst\n \n{\n \ngenerators\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\n\nclass\n \nMyGeneerator\n{\n\n  \nisSatisfiedBy\n(\nname\n)\n \n{\n\n    \nreturn\n \nname\n \n===\n \n'my-generator'\n;\n\n  \n}\n\n\n  \ngenerate\n(\nparams\n)\n \n{\n\n    \nreturn\n \nPromise\n.\nresolve\n(\n'some-random-value'\n);\n\n  \n}\n\n\n}\n\n\n\ngenerators\n.\naddGenerator\n(\nnew\n \nMyGeneerator\n());\n\n\n\n\n\n\nComparators\n\n\nComparators allows you to check if a set of values has an expected order\n\n\nYou can add your own comparators:\n\n\nconst\n \n{\n \ncomparators\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\n\nclass\n \nMyComparator\n \n{\n\n  \nisSatisfiedBy\n(\nvalues\n)\n \n{\n\n    \nfor\n(\nlet\n \ni\n=\n0\n;\n \ni\n<\nvalues\n.\nlength\n;\n \ni\n++\n)\n \n{\n\n      \nif\n \n(\nvalues\n[\ni\n]\n \n!==\n \n'foo'\n \n&&\n \nvalues\n[\ni\n]\n \n!==\n \n'bar'\n)\n \n{\n\n        \nreturn\n \nfalse\n;\n\n      \n}\n\n    \n}\n\n\n    \nreturn\n \ntrue\n;\n\n  \n}\n\n\n  \ncompare\n(\nvalues\n,\n \norder\n)\n \n{\n\n    \nfor\n \n(\nlet\n \ni\n \n=\n \n1\n;\n \ni\n \n<\n \nvalues\n.\nlength\n;\n \ni\n++\n)\n \n{\n\n      \nconst\n \npreviousValue\n \n=\n \nvalues\n[\ni\n \n-\n \n1\n];\n\n      \nconst\n \ncurrentValue\n \n=\n \nvalues\n[\ni\n];\n\n\n      \nif\n \n(\npreviousValue\n \n===\n \ncurrentValue\n)\n \n{\n\n        \nreturn\n \nPromise\n.\nreject\n(\n'Wrong order'\n);\n\n      \n}\n\n    \n}\n\n\n    \nreturn\n \nPromise\n.\nresolve\n(\n'Foo bar!'\n);\n\n  \n}\n\n\n};\n\n\n\ncomparators\n.\naddComparator\n(\nnew\n \nMyComparator\n());\n\n\n\n\n\n\nForm handlers\n\n\nForm handlers allows you to fill the form inputs and check value of filled fields\n\n\nYou can add your own handlers:\n\n\nconst\n \n{\n \nhandlers\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\n\nconst\n \nMyHandler\n \n{\n\n  \nconstructor\n()\n \n{\n\n    \nthis\n.\nregisterFieldType\n \n=\n \nfalse\n;\n\n    \nthis\n.\nfieldType\n \n=\n \n'default'\n;\n\n  \n}\n\n\n  \nisSatisfiedBy\n(\nelement\n,\n \nelementName\n)\n \n{\n\n    \nreturn\n \nPromise\n.\nresolve\n(\nelementName\n \n===\n \n'someElementName'\n);\n\n  \n}\n\n\n  \nhandleFill\n(\npage\n,\n \nelementName\n,\n \ndesiredValue\n)\n \n{\n\n    \nreturn\n \npage\n[\nelementName\n].\nisDisplayed\n()\n\n      \n.\nthen\n(\nfunction\n \n()\n \n{\n\n        \nreturn\n \npage\n[\nelementName\n].\nclear\n().\nthen\n(\nfunction\n \n()\n \n{\n\n          \nreturn\n \npage\n[\nelementName\n].\nsendKeys\n(\ndesiredValue\n);\n\n        \n});\n\n      \n}\n\n    \n);\n\n  \n}\n\n\n  \nhandleCheck\n(\npage\n,\n \nelementName\n,\n \ndesiredValue\n)\n \n{\n\n    \nreturn\n \npage\n[\nelementName\n].\nisDisplayed\n()\n\n      \n.\nthen\n(\nfunction\n \n()\n \n{\n\n        \nreturn\n \npage\n[\nelementName\n].\ngetAttribute\n(\n'value'\n).\nthen\n(\nfunction\n \n(\nvalue\n)\n \n{\n\n          \nif\n \n(\nvalue\n \n===\n \ndesiredValue\n)\n \n{\n\n            \nreturn\n \nPromise\n.\nresolve\n();\n\n          \n}\n\n\n          \nreturn\n \nPromise\n.\nreject\n(\n`Expected \n${\ndesiredValue\n}\n got \n${\nvalue\n}\n for text input element \n${\nelementName\n}\n`\n);\n\n        \n});\n\n      \n}\n\n    \n);\n\n  \n}\n\n\n};\n\n\n\nhandlers\n.\naddHandler\n(\nnew\n \nMyHandler\n());\n\n\n\n\n\n\nTransformers\n\n\nTransformers can be used in steps \nWhen I fill the \"form\" form with:\n and \nAnd the \"joinOurStoreForm\" form is filled with:\n.\n\n\nExisting transformers:\n- generators (prefix: \ng:\n)\n- dictionaries (prefix: \nd:\n)\n- variableStore (prefix: \nv:\n)\nTransformers can be used in mentioned steps by using specific 'prefix', parameters are sent after \n:\n sign.\nExample:\n\ng:generatorName:param:param\n\n\nYou can add your own handlers:\n\n\nconst\n \n{\n \ntransformers\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\n\nclass\n \nMyTransformer\n \n{\n\n\n  \nisSatisfiedBy\n(\nprefix\n)\n \n{\n\n    \nreturn\n \n'yourPrefix:'\n \n===\n \nprefix\n;\n\n  \n}\n\n\n  \ntransform\n(\nvalue\n)\n \n{\n\n    \n//code\n\n  \n}\n\n\n}\n\n\ntransformers\n.\naddTransformer\n(\nnew\n \nMyTransformer\n());\n\n\n\n\n\n\nEmail checking service\n\n\nYou can easily check emails with Kakunin. By default we give you MailTrap client implementation, but you can easily add your own client. \n\n\nconst\n \n{\n \nemailService\n \n}\n \n=\n \nrequire\n(\n'kakunin'\n);\n\n\n\nclass\n \nMyEmailService\n \n{\n\n  \n//you have access to full kakunin config\n\n  \nisSatisfiedBy\n(\nconfig\n)\n \n{\n\n    \nreturn\n \nconfig\n.\nemail\n.\ntype\n \n===\n \n'my-custom-email-service'\n;\n\n  \n}\n\n\n  \n//method used to clear emails before tests\n\n  \nclearInbox\n()\n \n{\n\n    \n...\n\n  \n}\n\n\n  \n//method used to get emails - this method should return emails in format described below\n\n  \ngetEmails\n()\n \n{\n\n    \n...\n\n  \n}\n\n\n  \n//method used to retrive atachments for given email - should return attachments in format described below\n\n  \ngetAttachments\n(\nemail\n)\n \n{\n\n    \n...\n\n  \n}\n\n\n  \n//method used to mark given email as read\n\n  \nmarkAsRead\n(\nemail\n)\n \n{\n\n    \n...\n\n  \n}\n\n\n}\n\n\n\nemailService\n.\naddAdapter\n(\nnew\n \nMyEmailService\n());\n\n\n\n\n\n\nEmails should be returned as an array of objects with given schema:\n\n\n  \n[\n\n    \n{\n\n      \n\"subject\"\n:\n \n\"SMTP e-mail test\"\n,\n\n      \n\"sent_at\"\n:\n \n\"2013-08-25T19:32:07.567+03:00\"\n,\n\n      \n\"from_email\"\n:\n \n\"me@railsware.com\"\n,\n\n      \n\"from_name\"\n:\n \n\"Private Person\"\n,\n\n      \n\"to_email\"\n:\n \n\"test@railsware.com\"\n,\n\n      \n\"to_name\"\n:\n \n\"A Test User\"\n,\n\n      \n\"html_body\"\n:\n \n\"\"\n,\n\n      \n\"text_body\"\n:\n \n\"This is a test e-mail message.\\r\\n\"\n,\n\n      \n\"email_size\"\n:\n \n193\n,\n\n      \n\"is_read\"\n:\n \ntrue\n,\n\n      \n\"created_at\"\n:\n \n\"2013-08-25T19:32:07.576+03:00\"\n,\n\n      \n\"updated_at\"\n:\n \n\"2013-08-25T19:32:09.232+03:00\"\n,\n\n      \n\"sent_at_timestamp\"\n:\n \n1377448326\n\n    \n}\n\n  \n]\n\n\n\n\n\n\nthis is MailTrap email format.\n\n\nAttachments should be returned as an array of objects with given schema:\n\n\n  \n[\n\n    \n{\n\n      \n\"id\"\n:\n \n1737\n,\n\n      \n\"message_id\"\n:\n \n54508\n,\n\n      \n\"filename\"\n:\n \n\"Photos.png\"\n,\n\n      \n\"attachment_type\"\n:\n \n\"attachment\"\n,\n\n      \n\"content_type\"\n:\n \n\"image/png\"\n,\n\n      \n\"content_id\"\n:\n \n\"\"\n,\n\n      \n\"transfer_encoding\"\n:\n \n\"base64\"\n,\n\n      \n\"attachment_size\"\n:\n \n213855\n,\n\n      \n\"created_at\"\n:\n \n\"2013-08-16T00:39:34.677+03:00\"\n,\n\n      \n\"updated_at\"\n:\n \n\"2013-08-16T00:39:34.677+03:00\"\n,\n\n      \n\"attachment_human_size\"\n:\n \n\"210 KB\"\n,\n\n      \n\"download_path\"\n:\n \n\"/api/v1/inboxes/3/messages/54508/attachments/1737/download\"\n\n    \n}\n\n  \n]\n\n\n\n\n\n\nthis is MailTrap attachment format.",
            "title": "Extending Kakunin"
        },
        {
            "location": "/extending/#internal-services",
            "text": "",
            "title": "Internal services"
        },
        {
            "location": "/extending/#regex-builder",
            "text": "Regex builder is a special builder for creating  RegExp  objects based on regexp name. Internally it has access to not only to all built-in \nregular expression files, but also custom ones specified by user.   const   {   regexBuilder   }   =   require ( 'kakunin' );  const   myRegex   =   regexBuilder . buildRegex ( 'r:number' );  //myRegex will contain RegExp object that matches regular expression under the name \"number\" in regexes file.",
            "title": "Regex builder"
        },
        {
            "location": "/extending/#variable-store",
            "text": "Variable store allows you to store and read some values to be used during given scenario.  const   {   variableStore   }   =   require ( 'kakunin' );  variableStore . storeVariable ( 'some-name' ,   'some-value' );  const   myValue   =   variableStore . getVariableValue ( 'some-name' );   //contains 'some-value'",
            "title": "Variable store"
        },
        {
            "location": "/extending/#user-provider",
            "text": "Kakunin comes with functionality that allows you to easily load credentials for a given account type -  UserProvider .  In  kakunin.conf.js  you can find a section  accounts .  The structure it has is very simple:   \"accounts\" :   { \n     \"someAccount\" :   { \n         \"accounts\" :   [ \n             { \n                 \"email\" :   \"\" , \n                 \"password\" :   \"\" \n             } \n         ] \n     }  }   someAccount  - the name of accounts group  accounts  - an array of account credentials (in order to be able to check if a  currentUser  got an email, this has to have an  email  key, otherwise account can have any kind of\nproperties)  Use provider is accessible inside any kind of a step by calling  this.userProvider . It comes with a single method:  this.userProvider.getUser(groupName)  - returns an account credentials for a given user group.  It is a good practice to save a current user in  this.currentUser  variable for a email checking service.",
            "title": "User provider"
        },
        {
            "location": "/extending/#adding-custom-code",
            "text": "",
            "title": "Adding custom code"
        },
        {
            "location": "/extending/#custom-step",
            "text": "In order to add a custom step, you have to create inside of a directory specified as  step_definitions  in kakunin configuration file  default: /step_definitions .  We're using  cucumber-js 2.X  so in order to add custom step you have to use  defineSupportCode  method like this:     const   {   defineSupportCode   }   =   require ( 'kakunin' ); \n\n   defineSupportCode (({   When   })   =>   { \n     When ( /^I use kakunin$/ ,   function ()   { \n       expect ( true ). to . equal ( true ); \n     }); \n   });",
            "title": "Custom step"
        },
        {
            "location": "/extending/#page-objects",
            "text": "Kakunin comes with some built-in page objects, that should be used as a base for your page objects.  In order to create a custom one, create a file inside the  pages  directory and extend the  BasePage  from kakunin package.  const   {   BasePage   }   =   require ( 'kakunin' );  class   MyPageObject   extends   BasePage   { \n   constructor ()   { \n     this . myElement   =   element ( by . css ( '.some-elemnt' )); \n   }  }  module . exports   =   MyPageObject ;",
            "title": "Page objects"
        },
        {
            "location": "/extending/#matchers",
            "text": "Matchers are used to compare if given value is matching our expectation. For example if a value in table is a number.  You can add your own matcher as below:  const   {   matchers   }   =   require ( 'kakunin' );  class   MyMatcher   { \n   isSatisfiedBy ( prefix ,   name )   { \n     return   prefix   ===   'm:'   &&   name   ===   'pending' ; \n   } \n\n   match ( protractorElement ,   matcherName )   { \n     return   protractorElement . getText (). then (( value )   =>   value   ===   'pending' );  \n   }  }  matchers . addMatcher ( new   MyMatcher ());",
            "title": "Matchers"
        },
        {
            "location": "/extending/#dictionaries",
            "text": "Dictionaries allows you to present complicated values in much more readable way. For example if an element must be\nin a form of IRI  /some-resource/123-123-123-23  and you wish to use  pending-resource  as it's alias.  You can add your own dictionary:  const   {   dictionaries   }   =   require ( 'kakunin' );  const   {   BaseDictionary   }   =   require ( 'kakunin' );  class   TestDictionary   extends   BaseDictionary   { \n   constructor ()   { \n     super ( 'name-of-dictionary' ,   { \n       'pending-resource' :   '/some-resource/123-123-123-23' , \n       'test-value' :   'some other value' \n     }); \n   }  }  dictionaries . addDictionary ( new   TestDictionary ());",
            "title": "Dictionaries"
        },
        {
            "location": "/extending/#generators",
            "text": "Generators allows you to create random values  You can add your own generator:  const   {   generators   }   =   require ( 'kakunin' );  class   MyGeneerator { \n   isSatisfiedBy ( name )   { \n     return   name   ===   'my-generator' ; \n   } \n\n   generate ( params )   { \n     return   Promise . resolve ( 'some-random-value' ); \n   }  }  generators . addGenerator ( new   MyGeneerator ());",
            "title": "Generators"
        },
        {
            "location": "/extending/#comparators",
            "text": "Comparators allows you to check if a set of values has an expected order  You can add your own comparators:  const   {   comparators   }   =   require ( 'kakunin' );  class   MyComparator   { \n   isSatisfiedBy ( values )   { \n     for ( let   i = 0 ;   i < values . length ;   i ++ )   { \n       if   ( values [ i ]   !==   'foo'   &&   values [ i ]   !==   'bar' )   { \n         return   false ; \n       } \n     } \n\n     return   true ; \n   } \n\n   compare ( values ,   order )   { \n     for   ( let   i   =   1 ;   i   <   values . length ;   i ++ )   { \n       const   previousValue   =   values [ i   -   1 ]; \n       const   currentValue   =   values [ i ]; \n\n       if   ( previousValue   ===   currentValue )   { \n         return   Promise . reject ( 'Wrong order' ); \n       } \n     } \n\n     return   Promise . resolve ( 'Foo bar!' ); \n   }  };  comparators . addComparator ( new   MyComparator ());",
            "title": "Comparators"
        },
        {
            "location": "/extending/#form-handlers",
            "text": "Form handlers allows you to fill the form inputs and check value of filled fields  You can add your own handlers:  const   {   handlers   }   =   require ( 'kakunin' );  const   MyHandler   { \n   constructor ()   { \n     this . registerFieldType   =   false ; \n     this . fieldType   =   'default' ; \n   } \n\n   isSatisfiedBy ( element ,   elementName )   { \n     return   Promise . resolve ( elementName   ===   'someElementName' ); \n   } \n\n   handleFill ( page ,   elementName ,   desiredValue )   { \n     return   page [ elementName ]. isDisplayed () \n       . then ( function   ()   { \n         return   page [ elementName ]. clear (). then ( function   ()   { \n           return   page [ elementName ]. sendKeys ( desiredValue ); \n         }); \n       } \n     ); \n   } \n\n   handleCheck ( page ,   elementName ,   desiredValue )   { \n     return   page [ elementName ]. isDisplayed () \n       . then ( function   ()   { \n         return   page [ elementName ]. getAttribute ( 'value' ). then ( function   ( value )   { \n           if   ( value   ===   desiredValue )   { \n             return   Promise . resolve (); \n           } \n\n           return   Promise . reject ( `Expected  ${ desiredValue }  got  ${ value }  for text input element  ${ elementName } ` ); \n         }); \n       } \n     ); \n   }  };  handlers . addHandler ( new   MyHandler ());",
            "title": "Form handlers"
        },
        {
            "location": "/extending/#transformers",
            "text": "Transformers can be used in steps  When I fill the \"form\" form with:  and  And the \"joinOurStoreForm\" form is filled with: .  Existing transformers:\n- generators (prefix:  g: )\n- dictionaries (prefix:  d: )\n- variableStore (prefix:  v: )\nTransformers can be used in mentioned steps by using specific 'prefix', parameters are sent after  :  sign.\nExample: g:generatorName:param:param  You can add your own handlers:  const   {   transformers   }   =   require ( 'kakunin' );  class   MyTransformer   { \n\n   isSatisfiedBy ( prefix )   { \n     return   'yourPrefix:'   ===   prefix ; \n   } \n\n   transform ( value )   { \n     //code \n   }  }  transformers . addTransformer ( new   MyTransformer ());",
            "title": "Transformers"
        },
        {
            "location": "/extending/#email-checking-service",
            "text": "You can easily check emails with Kakunin. By default we give you MailTrap client implementation, but you can easily add your own client.   const   {   emailService   }   =   require ( 'kakunin' );  class   MyEmailService   { \n   //you have access to full kakunin config \n   isSatisfiedBy ( config )   { \n     return   config . email . type   ===   'my-custom-email-service' ; \n   } \n\n   //method used to clear emails before tests \n   clearInbox ()   { \n     ... \n   } \n\n   //method used to get emails - this method should return emails in format described below \n   getEmails ()   { \n     ... \n   } \n\n   //method used to retrive atachments for given email - should return attachments in format described below \n   getAttachments ( email )   { \n     ... \n   } \n\n   //method used to mark given email as read \n   markAsRead ( email )   { \n     ... \n   }  }  emailService . addAdapter ( new   MyEmailService ());   Emails should be returned as an array of objects with given schema:     [ \n     { \n       \"subject\" :   \"SMTP e-mail test\" , \n       \"sent_at\" :   \"2013-08-25T19:32:07.567+03:00\" , \n       \"from_email\" :   \"me@railsware.com\" , \n       \"from_name\" :   \"Private Person\" , \n       \"to_email\" :   \"test@railsware.com\" , \n       \"to_name\" :   \"A Test User\" , \n       \"html_body\" :   \"\" , \n       \"text_body\" :   \"This is a test e-mail message.\\r\\n\" , \n       \"email_size\" :   193 , \n       \"is_read\" :   true , \n       \"created_at\" :   \"2013-08-25T19:32:07.576+03:00\" , \n       \"updated_at\" :   \"2013-08-25T19:32:09.232+03:00\" , \n       \"sent_at_timestamp\" :   1377448326 \n     } \n   ]   this is MailTrap email format.  Attachments should be returned as an array of objects with given schema:     [ \n     { \n       \"id\" :   1737 , \n       \"message_id\" :   54508 , \n       \"filename\" :   \"Photos.png\" , \n       \"attachment_type\" :   \"attachment\" , \n       \"content_type\" :   \"image/png\" , \n       \"content_id\" :   \"\" , \n       \"transfer_encoding\" :   \"base64\" , \n       \"attachment_size\" :   213855 , \n       \"created_at\" :   \"2013-08-16T00:39:34.677+03:00\" , \n       \"updated_at\" :   \"2013-08-16T00:39:34.677+03:00\" , \n       \"attachment_human_size\" :   \"210 KB\" , \n       \"download_path\" :   \"/api/v1/inboxes/3/messages/54508/attachments/1737/download\" \n     } \n   ]   this is MailTrap attachment format.",
            "title": "Email checking service"
        }
    ]
}